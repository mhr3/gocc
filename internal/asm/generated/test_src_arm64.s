//go:build !noasm && arm64
// Code generated by gocc devel -- DO NOT EDIT.
//
// Source file         : test_src.c
// Clang version       : Apple clang version 16.0.0 (clang-1600.0.26.3)
// Target architecture : arm64
// Compiler options    : [none]

#include "textflag.h"

TEXT ·Test_fn_4818_0(SB), NOSPLIT, $0-32
	MOVW a+0(FP), R0
	MOVD b+8(FP), R1
	MOVB c+16(FP), R2
	MOVD res+24(FP), R3
	NOP                  // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ANDW $255, R2, R8    // <--                                  // and	w8, w2, #0xff
	NOP                  // (skipped)                            // mov	x29, sp
	MULW R0, R8, R8      // <--                                  // mul	w8, w8, w0
	ADD  R8.SXTW, R1, R8 // <--                                  // add	x8, x1, w8, sxtw
	WORD $0xf9000068     // MOVD R8, (R3)                        // str	x8, [x3]
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	RET                  // <--                                  // ret

TEXT ·Test_fn_111_0(SB), NOSPLIT, $0-3
	MOVB a+0(FP), R0
	MOVB b+1(FP), R1
	MOVB c+2(FP), R2
	NOP              // (skipped)                            // stp	x29, x30, [sp, #-16]!
	NOP              // (skipped)                            // mov	x29, sp
	NOP              // (skipped)                            // ldp	x29, x30, [sp], #16
	RET              // <--                                  // ret

TEXT ·Test_fn_111_1(SB), NOSPLIT, $0-9
	MOVB  a+0(FP), R0
	MOVB  b+1(FP), R1
	MOVB  c+2(FP), R2
	NOP                  // (skipped)                            // stp	x29, x30, [sp, #-16]!
	NOP                  // (skipped)                            // mov	x29, sp
	MADDW R0, R1, R2, R0 // <--                                  // madd	w0, w2, w0, w1
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB  R0, ret+8(FP)  // <--
	RET                  // <--                                  // ret

TEXT ·Test_fn_1114_1(SB), NOSPLIT, $0-9
	MOVB  a+0(FP), R0
	MOVB  b+1(FP), R1
	MOVB  c+2(FP), R2
	MOVW  d+4(FP), R3
	NOP                    // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ANDW  $255, R2, R8     // <--                                  // and	w8, w2, #0xff
	ANDW  $255, R0, R9     // <--                                  // and	w9, w0, #0xff
	ADDW  R1.UXTB, R3, R10 // <--                                  // add	w10, w3, w1, uxtb
	NOP                    // (skipped)                            // mov	x29, sp
	MADDW R9, R10, R8, R0  // <--                                  // madd	w0, w8, w9, w10
	NOP                    // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB  R0, ret+8(FP)    // <--
	RET                    // <--                                  // ret

TEXT ·Test_fn_282_2(SB), NOSPLIT, $0-26
	MOVH  a+0(FP), R0
	MOVD  b+8(FP), R1
	MOVH  c+16(FP), R2
	NOP                  // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ANDW  $65535, R0, R8 // <--                                  // and	w8, w0, #0xffff
	ANDW  $65535, R2, R9 // <--                                  // and	w9, w2, #0xffff
	NOP                  // (skipped)                            // mov	x29, sp
	MADDW R8, R1, R9, R0 // <--                                  // madd	w0, w9, w8, w1
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVH  R0, ret+24(FP) // <--
	RET                  // <--                                  // ret

TEXT ·Test_fn_481_1(SB), NOSPLIT, $0-25
	MOVW  a+0(FP), R0
	MOVD  b+8(FP), R1
	MOVB  c+16(FP), R2
	NOP                  // (skipped)                            // stp	x29, x30, [sp, #-16]!
	ANDW  $255, R2, R8   // <--                                  // and	w8, w2, #0xff
	NOP                  // (skipped)                            // mov	x29, sp
	MADDW R0, R1, R8, R0 // <--                                  // madd	w0, w8, w0, w1
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB  R0, ret+24(FP) // <--
	RET                  // <--                                  // ret

TEXT ·Test_fn_444_4(SB), NOSPLIT, $0-20
	MOVW  a+0(FP), R0
	MOVW  b+4(FP), R1
	MOVW  c+8(FP), R2
	NOP                  // (skipped)                            // stp	x29, x30, [sp, #-16]!
	NOP                  // (skipped)                            // mov	x29, sp
	MADDW R0, R1, R2, R0 // <--                                  // madd	w0, w2, w0, w1
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVW  R0, ret+16(FP) // <--
	RET                  // <--                                  // ret

TEXT ·Test_fn_44F4F8_4(SB), NOSPLIT, $0-28
	MOVW   a+0(FP), R0
	MOVW   b+4(FP), R1
	FMOVS  c+8(FP), F0
	FMOVD  d+16(FP), F1
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	WORD   $0x1e220002    // SCVTFWS R0, F2                       // scvtf	s2, w0
	WORD   $0x1e220023    // SCVTFWS R1, F3                       // scvtf	s3, w1
	NOP                   // (skipped)                            // mov	x29, sp
	FMADDS F0, F3, F2, F0 // <--                                  // fmadd	s0, s2, s0, s3
	WORD   $0x1e22c000    // FCVTSD F0, F0                        // fcvt	d0, s0
	FADDD  F1, F0, F0     // <--                                  // fadd	d0, d0, d1
	WORD   $0x1e780000    // FCVTZSDW F0, R0                      // fcvtzs	w0, d0
	NOP                   // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVW   R0, ret+24(FP) // <--
	RET                   // <--                                  // ret

TEXT ·Test_fn_F4F4F8_F8(SB), NOSPLIT, $0-24
	FMOVS  a+0(FP), F0
	FMOVS  b+4(FP), F1
	FMOVD  c+8(FP), F2
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	WORD   $0x1e22c000    // FCVTSD F0, F0                        // fcvt	d0, s0
	WORD   $0x1e22c021    // FCVTSD F1, F1                        // fcvt	d1, s1
	NOP                   // (skipped)                            // mov	x29, sp
	FMADDD F2, F1, F0, F0 // <--                                  // fmadd	d0, d0, d2, d1
	NOP                   // (skipped)                            // ldp	x29, x30, [sp], #16
	FMOVD  F0, ret+16(FP) // <--
	RET                   // <--                                  // ret

TEXT ·Test_fn_888888_8(SB), NOSPLIT, $0-56
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD c+16(FP), R2
	MOVD d+24(FP), R3
	MOVD e+32(FP), R4
	MOVD f+40(FP), R5
	NOP                 // (skipped)                            // stp	x29, x30, [sp, #-16]!
	MADD R0, R1, R2, R8 // <--                                  // madd	x8, x2, x0, x1
	NOP                 // (skipped)                            // mov	x29, sp
	ADD  R4, R8, R8     // <--                                  // add	x8, x8, x4
	MADD R3, R8, R5, R0 // <--                                  // madd	x0, x5, x3, x8
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+48(FP) // <--
	RET                 // <--                                  // ret

TEXT ·Test_fn_sq_floats(SB), NOSPLIT, $0-48
	MOVD input+0(FP), R0
	MOVD input_len+8(FP), R1
	MOVD input_cap+16(FP), R2
	MOVD output+24(FP), R3
	MOVD output_len+32(FP), R4
	MOVD output_cap+40(FP), R5
	CMP  $1, R1                // <--                                  // cmp	x1, #1
	BLT  LBB10_9               // <--                                  // b.lt	.LBB10_9
	NOP                        // (skipped)                            // stp	x29, x30, [sp, #-16]!
	MOVD ZR, R8                // <--                                  // mov	x8, xzr
	CMP  $8, R1                // <--                                  // cmp	x1, #8
	NOP                        // (skipped)                            // mov	x29, sp
	BCC  LBB10_6               // <--                                  // b.lo	.LBB10_6
	SUB  R0, R3, R9            // <--                                  // sub	x9, x3, x0
	CMP  $32, R9               // <--                                  // cmp	x9, #32
	BCC  LBB10_6               // <--                                  // b.lo	.LBB10_6
	AND  $-8, R1, R8           // <--                                  // and	x8, x1, #0xfffffffffffffff8
	ADD  $16, R0, R9           // <--                                  // add	x9, x0, #16
	ADD  $16, R3, R10          // <--                                  // add	x10, x3, #16
	MOVD R8, R11               // <--                                  // mov	x11, x8

LBB10_4:
	WORD $0xad7f8520   // FLDPQ -16(R9), (F0, F1)              // ldp	q0, q1, [x9, #-16]
	ADD  $32, R9, R9   // <--                                  // add	x9, x9, #32
	SUBS $8, R11, R11  // <--                                  // subs	x11, x11, #8
	WORD $0x6e20dc00   // FMUL V0.S4, V0.S4, V0.S4             // fmul	v0.4s, v0.4s, v0.4s
	WORD $0x6e21dc21   // FMUL V1.S4, V1.S4, V1.S4             // fmul	v1.4s, v1.4s, v1.4s
	WORD $0xad3f8540   // FSTPQ (F0, F1), -16(R10)             // stp	q0, q1, [x10, #-16]
	ADD  $32, R10, R10 // <--                                  // add	x10, x10, #32
	BNE  LBB10_4       // <--                                  // b.ne	.LBB10_4
	CMP  R1, R8        // <--                                  // cmp	x8, x1
	BEQ  LBB10_8       // <--                                  // b.eq	.LBB10_8

LBB10_6:
	LSL $2, R8, R10  // <--                                  // lsl	x10, x8, #2
	SUB R8, R1, R8   // <--                                  // sub	x8, x1, x8
	ADD R10, R3, R9  // <--                                  // add	x9, x3, x10
	ADD R10, R0, R10 // <--                                  // add	x10, x0, x10

LBB10_7:
	WORD  $0xbc404540 // FMOVS.P 4(R10), F0                   // ldr	s0, [x10], #4
	SUBS  $1, R8, R8  // <--                                  // subs	x8, x8, #1
	FMULS F0, F0, F0  // <--                                  // fmul	s0, s0, s0
	WORD  $0xbc004520 // FMOVS.P F0, 4(R9)                    // str	s0, [x9], #4
	BNE   LBB10_7     // <--                                  // b.ne	.LBB10_7

LBB10_8:
	NOP // (skipped)                            // ldp	x29, x30, [sp], #16

LBB10_9:
	RET // <--                                  // ret
