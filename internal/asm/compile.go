// Copyright 2022 gorse Project Authors
// Copyright 2023 Roman Atachiants
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package asm

import (
	"fmt"
	"os"
	"strings"

	"github.com/kelindar/gocc/internal/config"
	"github.com/klauspost/asmfmt"
)

// Generate generates the Go PLAN9 assembly
func Generate(arch *config.Arch, functions []Function) ([]byte, error) {
	var builder strings.Builder
	builder.WriteString(arch.BuildTags)
	builder.WriteString("// AUTO-GENERATED BY GOCC -- DO NOT EDIT\n")
	builder.WriteString("\n#include \"textflag.h\"\n\n")
	for _, function := range functions {
		for i, c := range function.Consts {
			if i != 0 {
				builder.WriteString("\n")
			}
			builder.WriteString(c.Compile(arch))
		}

		name := function.Name
		if function.GoFunc.Expr != nil {
			name = function.GoFunc.Name
		}
		paramsSize := 8 * len(function.Params)
		//for _, param := range function.Params {
		//	paramsSize += param.Size()
		//}
		if function.Ret != nil {
			//paramsSize += function.Ret.Size()
			paramsSize += 8
		}
		builder.WriteString(fmt.Sprintf("\nTEXT Â·%v(SB),NOSPLIT,$0-%d\n", name, paramsSize))
		paramOffset := 0
		for i, param := range function.Params {
			loadInstr, ok := arch.CallOp[int8(param.Size())]
			if !ok {
				return nil, fmt.Errorf("unable to load parameter with size %d", param.Size())
			}
			builder.WriteString(fmt.Sprintf("\t%s %s+%d(FP), %s\n", loadInstr, param.Name, paramOffset, arch.Registers[i]))
			// 8 seems to be correct for both amd64 and arm64
			paramOffset += 8
		}
		for _, line := range function.Lines {
			builder.WriteString(line.Compile(arch))
		}
	}

	return asmfmt.Format(strings.NewReader(builder.String()))
}

// GenerateFile generates the Go PLAN9 assembly file
func GenerateFile(arch *config.Arch, path string, functions []Function) error {
	functions = ApplyTransforms(arch, functions)
	bytes, err := Generate(arch, functions)
	if err != nil {
		return err
	}

	return os.WriteFile(path, bytes, os.ModePerm)
}
