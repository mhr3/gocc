//go:build !noasm && amd64
// Code generated by gocc -- DO NOT EDIT.

#include "textflag.h"

TEXT ·f32_axpy(SB), NOSPLIT, $0-28
	MOVQ x+0(FP), DI
	MOVQ y+8(FP), SI
	MOVQ size+16(FP), DX
	MOVL alpha+24(FP), CX
	NOP                          // push	rbp
	NOP                          // mov	rbp, rsp
	NOP                          // and	rsp, -8
	LONG $0x08fa8348             // CMPQ $0x8, DX;	cmp	rdx, 8
	JB   LBB0_5                  // jb	.LBB0_5
	LONG $0x187de2c4; BYTE $0xc8 // SBBL CL, AL;	vbroadcastss	ymm1, xmm0
	LONG $0xf8428d48             // LEAQ -0x8(DX), AX;	lea	rax, [rdx - 8]
	WORD $0x8949; BYTE $0xc0     // MOVQ AX, R8;	mov	r8, rax
	LONG $0x03e8c149             // SHRQ $0x3, R8;	shr	r8, 3
	WORD $0xff49; BYTE $0xc0     // INCQ R8;	inc	r8
	LONG $0x08f88348             // CMPQ $0x8, AX;	cmp	rax, 8
	JAE  LBB0_12                 // jae	.LBB0_12
	WORD $0xc931                 // XORL CX, CX;	xor	ecx, ecx
	JMP  LBB0_3                  // jmp	.LBB0_3

LBB0_12:
	WORD $0x894c; BYTE $0xc0 // MOVQ R8, AX;	mov	rax, r8
	LONG $0xfee08348         // ANDQ $-0x2, AX;	and	rax, -2
	WORD $0xc931             // XORL CX, CX;	xor	ecx, ecx

LBB0_13:
	LONG $0x1410fcc5; BYTE $0x8f               // ADCB DL, 0(DI)(CX*4);	vmovups	ymm2, ymmword ptr [rdi + 4*rcx]
	LONG $0xa875e2c4; WORD $0x8e14             // vfmadd213ps	ymm2, ymm1, ymmword ptr [rsi + 4*rcx]
	LONG $0x1411fcc5; BYTE $0x8e               // ADCL DX, 0(SI)(CX*4);	vmovups	ymmword ptr [rsi + 4*rcx], ymm2
	LONG $0x5410fcc5; WORD $0x208f             // ADCB DL, 0x20(DI)(CX*4);	vmovups	ymm2, ymmword ptr [rdi + 4*rcx + 32]
	LONG $0xa875e2c4; WORD $0x8e54; BYTE $0x20 // vfmadd213ps	ymm2, ymm1, ymmword ptr [rsi + 4*rcx + 32]
	LONG $0x5411fcc5; WORD $0x208e             // ADCL DX, 0x20(SI)(CX*4);	vmovups	ymmword ptr [rsi + 4*rcx + 32], ymm2
	LONG $0x10c18348                           // ADDQ $0x10, CX;	add	rcx, 16
	LONG $0xfec08348                           // ADDQ $-0x2, AX;	add	rax, -2
	JNE  LBB0_13                               // jne	.LBB0_13

LBB0_3:
	LONG $0x01c0f641               // TESTL $0x1, R8;	test	r8b, 1
	JE   LBB0_5                    // je	.LBB0_5
	LONG $0x1410fcc5; BYTE $0x8f   // ADCB DL, 0(DI)(CX*4);	vmovups	ymm2, ymmword ptr [rdi + 4*rcx]
	LONG $0xa86de2c4; WORD $0x8e0c // vfmadd213ps	ymm1, ymm2, ymmword ptr [rsi + 4*rcx]
	LONG $0x0c11fcc5; BYTE $0x8e   // ADCL CX, 0(SI)(CX*4);	vmovups	ymmword ptr [rsi + 4*rcx], ymm1

LBB0_5:
	WORD $0xc2f6; BYTE $0x07       // TESTL $0x7, DL;	test	dl, 7
	JE   LBB0_11                   // je	.LBB0_11
	WORD $0x8948; BYTE $0xd0       // MOVQ DX, AX;	mov	rax, rdx
	LONG $0xf8e08348               // ANDQ $-0x8, AX;	and	rax, -8
	WORD $0x3948; BYTE $0xd0       // CMPQ DX, AX;	cmp	rax, rdx
	JAE  LBB0_11                   // jae	.LBB0_11
	WORD $0x8948; BYTE $0xc1       // MOVQ AX, CX;	mov	rcx, rax
	WORD $0xf748; BYTE $0xd1       // NOTQ CX;	not	rcx
	WORD $0xc2f6; BYTE $0x01       // TESTL $0x1, DL;	test	dl, 1
	JE   LBB0_9                    // je	.LBB0_9
	LONG $0x0c10fac5; BYTE $0x87   // ADCB CL, 0(DI)(AX*4);	vmovss	xmm1, dword ptr [rdi + 4*rax]
	LONG $0xa979e2c4; WORD $0x860c // vfmadd213ss	xmm1, xmm0, dword ptr [rsi + 4*rax]
	LONG $0x0c11fac5; BYTE $0x86   // ADCL CX, 0(SI)(AX*4);	vmovss	dword ptr [rsi + 4*rax], xmm1
	LONG $0x01c88348               // ORQ $0x1, AX;	or	rax, 1

LBB0_9:
	WORD $0x0148; BYTE $0xd1 // ADDQ DX, CX;	add	rcx, rdx
	JE   LBB0_11             // je	.LBB0_11

LBB0_10:
	LONG $0x0c10fac5; BYTE $0x87               // ADCB CL, 0(DI)(AX*4);	vmovss	xmm1, dword ptr [rdi + 4*rax]
	LONG $0xa979e2c4; WORD $0x860c             // vfmadd213ss	xmm1, xmm0, dword ptr [rsi + 4*rax]
	LONG $0x0c11fac5; BYTE $0x86               // ADCL CX, 0(SI)(AX*4);	vmovss	dword ptr [rsi + 4*rax], xmm1
	LONG $0x4c10fac5; WORD $0x0487             // ADCB CL, 0x4(DI)(AX*4);	vmovss	xmm1, dword ptr [rdi + 4*rax + 4]
	LONG $0xa979e2c4; WORD $0x864c; BYTE $0x04 // vfmadd213ss	xmm1, xmm0, dword ptr [rsi + 4*rax + 4]
	LONG $0x4c11fac5; WORD $0x0486             // ADCL CX, 0x4(SI)(AX*4);	vmovss	dword ptr [rsi + 4*rax + 4], xmm1
	LONG $0x02c08348                           // ADDQ $0x2, AX;	add	rax, 2
	WORD $0x3948; BYTE $0xd0                   // CMPQ DX, AX;	cmp	rax, rdx
	JB   LBB0_10                               // jb	.LBB0_10

LBB0_11:
	NOP                      // mov	rsp, rbp
	NOP                      // pop	rbp
	WORD $0xf8c5; BYTE $0x77 // VZEROUPPER;	vzeroupper
	RET

TEXT ·f32_matmul(SB), 0, $328-32
	MOVQ dst+0(FP), DI
	MOVQ m+8(FP), SI
	MOVQ n+16(FP), DX
	MOVQ dims+24(FP), CX
	NOP                                        // push	rbp
	NOP                                        // mov	rbp, rsp
	MOVQ R15, 288(SP)                          // push	r15
	MOVQ R14, 296(SP)                          // push	r14
	MOVQ R13, 304(SP)                          // push	r13
	MOVQ R12, 312(SP)                          // push	r12
	MOVQ BX, 320(SP)                           // push	rbx
	LONG $0xf8e48348                           // ANDQ $-0x8, SP;	and	rsp, -8
	NOP                                        // sub	rsp, 280
	LONG $0x24548948; BYTE $0x18               // MOVQ DX, 0x18(SP);	mov	qword ptr [rsp + 24], rdx
	WORD $0x8948; BYTE $0xc8                   // MOVQ CX, AX;	mov	rax, rcx
	LONG $0xffff2548; WORD $0x0000             // ANDQ $0xffff, AX;	and	rax, 65535
	LONG $0x24448948; BYTE $0x40               // MOVQ AX, 0x40(SP);	mov	qword ptr [rsp + 64], rax
	JE   LBB1_13                               // je	.LBB1_13
	WORD $0x8949; BYTE $0xc8                   // MOVQ CX, R8;	mov	r8, rcx
	WORD $0x8948; BYTE $0xc8                   // MOVQ CX, AX;	mov	rax, rcx
	LONG $0x30e8c148                           // SHRQ $0x30, AX;	shr	rax, 48
	LONG $0x24048948                           // MOVQ AX, 0(SP);	mov	qword ptr [rsp], rax
	JE   LBB1_13                               // je	.LBB1_13
	WORD $0x8949; BYTE $0xf3                   // MOVQ SI, R11;	mov	r11, rsi
	WORD $0x894d; BYTE $0xc7                   // MOVQ R8, R15;	mov	r15, r8
	LONG $0x10efc149                           // SHRQ $0x10, R15;	shr	r15, 16
	LONG $0xf7b70f41                           // MOVZX R15, SI;	movzx	esi, r15w
	LONG $0xf8e78141; WORD $0x00ff; BYTE $0x00 // ANDL $0xfff8, R15;	and	r15d, 65528
	LONG $0x240c8b48                           // MOVQ 0(SP), CX;	mov	rcx, qword ptr [rsp]
	LONG $0x02f98348                           // CMPQ $0x2, CX;	cmp	rcx, 2
	LONG $0x000001ba; BYTE $0x00               // MOVL $0x1, DX;	mov	edx, 1
	LONG $0xd1430f48                           // CMOVAE CX, DX;	cmovae	rdx, rcx
	QUAD $0x000000c824948948                   // MOVQ DX, 0xc8(SP);	mov	qword ptr [rsp + 200], rdx
	WORD $0x8948; BYTE $0xf2                   // MOVQ SI, DX;	mov	rdx, rsi
	WORD $0x294c; BYTE $0xfa                   // SUBQ R15, DX;	sub	rdx, r15
	LONG $0x24548948; BYTE $0x28               // MOVQ DX, 0x28(SP);	mov	qword ptr [rsp + 40], rdx
	LONG $0xf0e28348                           // ANDQ $-0x10, DX;	and	rdx, -16
	LONG $0x075f8d49                           // LEAQ 0x7(R15), BX;	lea	rbx, [r15 + 7]
	LONG $0xd9af0f48                           // IMULQ CX, BX;	imul	rbx, rcx
	QUAD $0x000000b0249c8948                   // MOVQ BX, 0xb0(SP);	mov	qword ptr [rsp + 176], rbx
	WORD $0x8948; BYTE $0xcb                   // MOVQ CX, BX;	mov	rbx, rcx
	LONG $0x06e3c148                           // SHLQ $0x6, BX;	shl	rbx, 6
	QUAD $0x000000a0249c8948                   // MOVQ BX, 0xa0(SP);	mov	qword ptr [rsp + 160], rbx
	LONG $0x065f8d49                           // LEAQ 0x6(R15), BX;	lea	rbx, [r15 + 6]
	LONG $0xd9af0f48                           // IMULQ CX, BX;	imul	rbx, rcx
	QUAD $0x00000090249c8948                   // MOVQ BX, 0x90(SP);	mov	qword ptr [rsp + 144], rbx
	LONG $0x05478d49                           // LEAQ 0x5(R15), AX;	lea	rax, [r15 + 5]
	LONG $0xc1af0f48                           // IMULQ CX, AX;	imul	rax, rcx
	LONG $0x24448948; BYTE $0x50               // MOVQ AX, 0x50(SP);	mov	qword ptr [rsp + 80], rax
	LONG $0x04478d49                           // LEAQ 0x4(R15), AX;	lea	rax, [r15 + 4]
	LONG $0xc1af0f48                           // IMULQ CX, AX;	imul	rax, rcx
	QUAD $0x0000011024848948                   // MOVQ AX, 0x110(SP);	mov	qword ptr [rsp + 272], rax
	LONG $0x03478d49                           // LEAQ 0x3(R15), AX;	lea	rax, [r15 + 3]
	LONG $0xc1af0f48                           // IMULQ CX, AX;	imul	rax, rcx
	QUAD $0x000000f824848948                   // MOVQ AX, 0xf8(SP);	mov	qword ptr [rsp + 248], rax
	LONG $0x026f8d4d                           // LEAQ 0x2(R15), R13;	lea	r13, [r15 + 2]
	LONG $0xe9af0f4c                           // IMULQ CX, R13;	imul	r13, rcx
	LONG $0x01678d4d                           // LEAQ 0x1(R15), R12;	lea	r12, [r15 + 1]
	LONG $0xe1af0f4c                           // IMULQ CX, R12;	imul	r12, rcx
	LONG $0x13e8c141                           // SHRL $0x13, R8;	shr	r8d, 19
	WORD $0x8949; BYTE $0xc9                   // MOVQ CX, R9;	mov	r9, rcx
	LONG $0xc8af0f4d                           // IMULQ R8, R9;	imul	r9, r8
	LONG $0x05e0c149                           // SHLQ $0x5, R8;	shl	r8, 5
	LONG $0x181c8d4b                           // LEAQ 0(R8)(R11*1), BX;	lea	rbx, [r8 + r11]
	LONG $0x20c38348                           // ADDQ $0x20, BX;	add	rbx, 32
	LONG $0x245c8948; BYTE $0x10               // MOVQ BX, 0x10(SP);	mov	qword ptr [rsp + 16], rbx
	LONG $0x05e1c149                           // SHLQ $0x5, R9;	shl	r9, 5
	QUAD $0x00000088248c894c                   // MOVQ R9, 0x88(SP);	mov	qword ptr [rsp + 136], r9
	LONG $0x0f5f8d49                           // LEAQ 0xf(R15), BX;	lea	rbx, [r15 + 15]
	LONG $0xd9af0f48                           // IMULQ CX, BX;	imul	rbx, rcx
	LONG $0x245c8948; BYTE $0x78               // MOVQ BX, 0x78(SP);	mov	qword ptr [rsp + 120], rbx
	LONG $0x0e778d4d                           // LEAQ 0xe(R15), R14;	lea	r14, [r15 + 14]
	LONG $0xf1af0f4c                           // IMULQ CX, R14;	imul	r14, rcx
	LONG $0x0d578d4d                           // LEAQ 0xd(R15), R10;	lea	r10, [r15 + 13]
	LONG $0xd1af0f4c                           // IMULQ CX, R10;	imul	r10, rcx
	LONG $0x0c478d4d                           // LEAQ 0xc(R15), R8;	lea	r8, [r15 + 12]
	LONG $0xc1af0f4c                           // IMULQ CX, R8;	imul	r8, rcx
	LONG $0x0b478d49                           // LEAQ 0xb(R15), AX;	lea	rax, [r15 + 11]
	LONG $0xc1af0f48                           // IMULQ CX, AX;	imul	rax, rcx
	LONG $0x0a5f8d49                           // LEAQ 0xa(R15), BX;	lea	rbx, [r15 + 10]
	LONG $0xd9af0f48                           // IMULQ CX, BX;	imul	rbx, rcx
	LONG $0x245c8948; BYTE $0x70               // MOVQ BX, 0x70(SP);	mov	qword ptr [rsp + 112], rbx
	LONG $0x095f8d49                           // LEAQ 0x9(R15), BX;	lea	rbx, [r15 + 9]
	LONG $0xd9af0f48                           // IMULQ CX, BX;	imul	rbx, rcx
	LONG $0x245c8948; BYTE $0x68               // MOVQ BX, 0x68(SP);	mov	qword ptr [rsp + 104], rbx
	LONG $0x085f8d49                           // LEAQ 0x8(R15), BX;	lea	rbx, [r15 + 8]
	LONG $0xd9af0f48                           // IMULQ CX, BX;	imul	rbx, rcx
	LONG $0x245c8948; BYTE $0x60               // MOVQ BX, 0x60(SP);	mov	qword ptr [rsp + 96], rbx
	LONG $0x24548948; BYTE $0x20               // MOVQ DX, 0x20(SP);	mov	qword ptr [rsp + 32], rdx
	WORD $0x014c; BYTE $0xfa                   // ADDQ R15, DX;	add	rdx, r15
	LONG $0x24548948; BYTE $0x58               // MOVQ DX, 0x58(SP);	mov	qword ptr [rsp + 88], rdx
	QUAD $0x00000000b5148d48                   // LEAQ 0(SI*4), DX;	lea	rdx, [4*rsi]
	LONG $0x24548948; BYTE $0x38               // MOVQ DX, 0x38(SP);	mov	qword ptr [rsp + 56], rdx
	QUAD $0x000000008d0c8d48                   // LEAQ 0(CX*4), CX;	lea	rcx, [4*rcx]
	QUAD $0x000000c0248c8948                   // MOVQ CX, 0xc0(SP);	mov	qword ptr [rsp + 192], rcx
	WORD $0xd231                               // XORL DX, DX;	xor	edx, edx
	QUAD $0x000000a824bc894c                   // MOVQ R15, 0xa8(SP);	mov	qword ptr [rsp + 168], r15
	QUAD $0x0000009824bc8948                   // MOVQ DI, 0x98(SP);	mov	qword ptr [rsp + 152], rdi
	QUAD $0x0000008024b48948                   // MOVQ SI, 0x80(SP);	mov	qword ptr [rsp + 128], rsi
	QUAD $0x0000010824a4894c                   // MOVQ R12, 0x108(SP);	mov	qword ptr [rsp + 264], r12
	QUAD $0x0000010024ac894c                   // MOVQ R13, 0x100(SP);	mov	qword ptr [rsp + 256], r13
	QUAD $0x000000f024848948                   // MOVQ AX, 0xf0(SP);	mov	qword ptr [rsp + 240], rax
	QUAD $0x000000e82484894c                   // MOVQ R8, 0xe8(SP);	mov	qword ptr [rsp + 232], r8
	QUAD $0x000000e02494894c                   // MOVQ R10, 0xe0(SP);	mov	qword ptr [rsp + 224], r10
	QUAD $0x000000d824b4894c                   // MOVQ R14, 0xd8(SP);	mov	qword ptr [rsp + 216], r14
	QUAD $0x000000b0248c8b4c                   // MOVQ 0xb0(SP), R9;	mov	r9, qword ptr [rsp + 176]
	LONG $0x246c8b4c; BYTE $0x50               // MOVQ 0x50(SP), R13;	mov	r13, qword ptr [rsp + 80]
	LONG $0x24748b4c; BYTE $0x78               // MOVQ 0x78(SP), R14;	mov	r14, qword ptr [rsp + 120]
	LONG $0x24648b4c; BYTE $0x70               // MOVQ 0x70(SP), R12;	mov	r12, qword ptr [rsp + 112]
	LONG $0x24448b48; BYTE $0x68               // MOVQ 0x68(SP), AX;	mov	rax, qword ptr [rsp + 104]
	LONG $0x24448b4c; BYTE $0x60               // MOVQ 0x60(SP), R8;	mov	r8, qword ptr [rsp + 96]
	QUAD $0x0000010824948b4c                   // MOVQ 0x108(SP), R10;	mov	r10, qword ptr [rsp + 264]
	JMP  LBB1_3                                // jmp	.LBB1_3

LBB1_12:
	LONG $0x24548b48; BYTE $0x48 // MOVQ 0x48(SP), DX;	mov	rdx, qword ptr [rsp + 72]
	WORD $0xff48; BYTE $0xc2     // INCQ DX;	inc	rdx
	LONG $0x244c8b48; BYTE $0x38 // MOVQ 0x38(SP), CX;	mov	rcx, qword ptr [rsp + 56]
	LONG $0x244c0148; BYTE $0x10 // ADDQ CX, 0x10(SP);	add	qword ptr [rsp + 16], rcx
	WORD $0x0149; BYTE $0xcb     // ADDQ CX, R11;	add	r11, rcx
	LONG $0x24543b48; BYTE $0x40 // CMPQ 0x40(SP), DX;	cmp	rdx, qword ptr [rsp + 64]
	JE   LBB1_13                 // je	.LBB1_13

LBB1_3:
	LONG $0x24548948; BYTE $0x48 // MOVQ DX, 0x48(SP);	mov	qword ptr [rsp + 72], rdx
	LONG $0x14af0f48; BYTE $0x24 // IMULQ 0(SP), DX;	imul	rdx, qword ptr [rsp]
	QUAD $0x000000d024948948     // MOVQ DX, 0xd0(SP);	mov	qword ptr [rsp + 208], rdx
	LONG $0x244c8b48; BYTE $0x18 // MOVQ 0x18(SP), CX;	mov	rcx, qword ptr [rsp + 24]
	LONG $0x244c8948; BYTE $0x30 // MOVQ CX, 0x30(SP);	mov	qword ptr [rsp + 48], rcx
	WORD $0xc931                 // XORL CX, CX;	xor	ecx, ecx
	LONG $0x244c8948; BYTE $0x08 // MOVQ CX, 0x8(SP);	mov	qword ptr [rsp + 8], rcx
	QUAD $0x000000b8249c894c     // MOVQ R11, 0xb8(SP);	mov	qword ptr [rsp + 184], r11
	JMP  LBB1_6                  // jmp	.LBB1_6

LBB1_5:
	QUAD $0x000000d0248c8b48       // MOVQ 0xd0(SP), CX;	mov	rcx, qword ptr [rsp + 208]
	LONG $0x245c8b48; BYTE $0x08   // MOVQ 0x8(SP), BX;	mov	rbx, qword ptr [rsp + 8]
	LONG $0x0b148d48               // LEAQ 0(BX)(CX*1), DX;	lea	rdx, [rbx + rcx]
	LONG $0x0411fac5; BYTE $0x97   // ADCL AX, 0(DI)(DX*4);	vmovss	dword ptr [rdi + 4*rdx], xmm0
	WORD $0xff48; BYTE $0xc3       // INCQ BX;	inc	rbx
	LONG $0x24448348; WORD $0x0430 // ADDQ $0x4, 0x30(SP);	add	qword ptr [rsp + 48], 4
	WORD $0x8948; BYTE $0xd9       // MOVQ BX, CX;	mov	rcx, rbx
	LONG $0x245c8948; BYTE $0x08   // MOVQ BX, 0x8(SP);	mov	qword ptr [rsp + 8], rbx
	QUAD $0x000000c8249c3b48       // CMPQ 0xc8(SP), BX;	cmp	rbx, qword ptr [rsp + 200]
	JE   LBB1_12                   // je	.LBB1_12

LBB1_6:
	LONG $0xc057f8c5               // vxorps	xmm0, xmm0, xmm0
	WORD $0x394c; BYTE $0xfe       // CMPQ R15, SI;	cmp	rsi, r15
	JBE  LBB1_5                    // jbe	.LBB1_5
	LONG $0xc057f8c5               // vxorps	xmm0, xmm0, xmm0
	WORD $0x894c; BYTE $0xfa       // MOVQ R15, DX;	mov	rdx, r15
	LONG $0x247c8348; WORD $0x1028 // CMPQ $0x10, 0x28(SP);	cmp	qword ptr [rsp + 40], 16
	JB   LBB1_11                   // jb	.LBB1_11
	LONG $0xc057f8c5               // vxorps	xmm0, xmm0, xmm0
	LONG $0x247c8b4c; BYTE $0x10   // MOVQ 0x10(SP), R15;	mov	r15, qword ptr [rsp + 16]
	LONG $0x24548b48; BYTE $0x30   // MOVQ 0x30(SP), DX;	mov	rdx, qword ptr [rsp + 48]
	LONG $0x247c8b48; BYTE $0x20   // MOVQ 0x20(SP), DI;	mov	rdi, qword ptr [rsp + 32]
	LONG $0xc957f0c5               // vxorps	xmm1, xmm1, xmm1
	QUAD $0x000000a0249c8b48       // MOVQ 0xa0(SP), BX;	mov	rbx, qword ptr [rsp + 160]
	QUAD $0x00000090249c8b4c       // MOVQ 0x90(SP), R11;	mov	r11, qword ptr [rsp + 144]
	QUAD $0x0000008824b48b48       // MOVQ 0x88(SP), SI;	mov	rsi, qword ptr [rsp + 136]

LBB1_9:
	QUAD $0x00000110248c8b48                   // MOVQ 0x110(SP), CX;	mov	rcx, qword ptr [rsp + 272]
	LONG $0x1410fac5; BYTE $0x8a               // ADCB DL, 0(DX)(CX*4);	vmovss	xmm2, dword ptr [rdx + 4*rcx]
	LONG $0x2169a3c4; WORD $0xaa14; BYTE $0x10 // vinsertps	xmm2, xmm2, dword ptr [rdx + 4*r13], 16
	LONG $0x2169a3c4; WORD $0x9a14; BYTE $0x20 // vinsertps	xmm2, xmm2, dword ptr [rdx + 4*r11], 32
	LONG $0x2169a3c4; WORD $0x8a14; BYTE $0x30 // vinsertps	xmm2, xmm2, dword ptr [rdx + 4*r9], 48
	LONG $0x1c10fac5; BYTE $0x32               // ADCB BL, 0(DX)(SI*1);	vmovss	xmm3, dword ptr [rdx + rsi]
	LONG $0x2161a3c4; WORD $0x921c; BYTE $0x10 // vinsertps	xmm3, xmm3, dword ptr [rdx + 4*r10], 16
	QUAD $0x00000100248c8b48                   // MOVQ 0x100(SP), CX;	mov	rcx, qword ptr [rsp + 256]
	LONG $0x2161e3c4; WORD $0x8a1c; BYTE $0x20 // vinsertps	xmm3, xmm3, dword ptr [rdx + 4*rcx], 32
	QUAD $0x000000f8248c8b48                   // MOVQ 0xf8(SP), CX;	mov	rcx, qword ptr [rsp + 248]
	LONG $0x2161e3c4; WORD $0x8a1c; BYTE $0x30 // vinsertps	xmm3, xmm3, dword ptr [rdx + 4*rcx], 48
	QUAD $0x000000e8248c8b48                   // MOVQ 0xe8(SP), CX;	mov	rcx, qword ptr [rsp + 232]
	LONG $0x2410fac5; BYTE $0x8a               // ADCB AH, 0(DX)(CX*4);	vmovss	xmm4, dword ptr [rdx + 4*rcx]
	QUAD $0x000000e0248c8b48                   // MOVQ 0xe0(SP), CX;	mov	rcx, qword ptr [rsp + 224]
	LONG $0x2159e3c4; WORD $0x8a24; BYTE $0x10 // vinsertps	xmm4, xmm4, dword ptr [rdx + 4*rcx], 16
	QUAD $0x000000d8248c8b48                   // MOVQ 0xd8(SP), CX;	mov	rcx, qword ptr [rsp + 216]
	LONG $0x2159e3c4; WORD $0x8a24; BYTE $0x20 // vinsertps	xmm4, xmm4, dword ptr [rdx + 4*rcx], 32
	LONG $0x2159a3c4; WORD $0xb224; BYTE $0x30 // vinsertps	xmm4, xmm4, dword ptr [rdx + 4*r14], 48
	LONG $0x107aa1c4; WORD $0x822c             // ADCB CH, 0(DX)(R8*4);	vmovss	xmm5, dword ptr [rdx + 4*r8]
	LONG $0x2151e3c4; WORD $0x822c; BYTE $0x10 // vinsertps	xmm5, xmm5, dword ptr [rdx + 4*rax], 16
	LONG $0x2151a3c4; WORD $0xa22c; BYTE $0x20 // vinsertps	xmm5, xmm5, dword ptr [rdx + 4*r12], 32
	LONG $0x1865e3c4; WORD $0x01d2             // vinsertf128	ymm2, ymm3, xmm2, 1
	QUAD $0x000000f0248c8b48                   // MOVQ 0xf0(SP), CX;	mov	rcx, qword ptr [rsp + 240]
	LONG $0x2151e3c4; WORD $0x8a1c; BYTE $0x30 // vinsertps	xmm3, xmm5, dword ptr [rdx + 4*rcx], 48
	LONG $0x1865e3c4; WORD $0x01dc             // vinsertf128	ymm3, ymm3, xmm4, 1
	LONG $0xb86dc2c4; WORD $0xe047             // vfmadd231ps	ymm0, ymm2, ymmword ptr [r15 - 32]
	LONG $0xb865c2c4; BYTE $0x0f               // vfmadd231ps	ymm1, ymm3, ymmword ptr [r15]
	WORD $0x0148; BYTE $0xda                   // ADDQ BX, DX;	add	rdx, rbx
	LONG $0x40c78349                           // ADDQ $0x40, R15;	add	r15, 64
	LONG $0xf0c78348                           // ADDQ $-0x10, DI;	add	rdi, -16
	JNE  LBB1_9                                // jne	.LBB1_9
	LONG $0xc058f4c5                           // vaddps	ymm0, ymm1, ymm0
	LONG $0x197de3c4; WORD $0x01c1             // vextractf128	xmm1, ymm0, 1
	LONG $0xc158f8c5                           // vaddps	xmm0, xmm0, xmm1
	LONG $0x0579e3c4; WORD $0x01c8             // vpermilpd	xmm1, xmm0, 1
	LONG $0xc158f8c5                           // vaddps	xmm0, xmm0, xmm1
	LONG $0xc816fac5                           // vmovshdup	xmm1, xmm0
	LONG $0xc158fac5                           // vaddss	xmm0, xmm0, xmm1
	LONG $0x24548b48; BYTE $0x58               // MOVQ 0x58(SP), DX;	mov	rdx, qword ptr [rsp + 88]
	LONG $0x247c8b48; BYTE $0x20               // MOVQ 0x20(SP), DI;	mov	rdi, qword ptr [rsp + 32]
	LONG $0x247c3948; BYTE $0x28               // CMPQ DI, 0x28(SP);	cmp	qword ptr [rsp + 40], rdi
	QUAD $0x0000009824bc8b48                   // MOVQ 0x98(SP), DI;	mov	rdi, qword ptr [rsp + 152]
	QUAD $0x000000a824bc8b4c                   // MOVQ 0xa8(SP), R15;	mov	r15, qword ptr [rsp + 168]
	QUAD $0x000000b8249c8b4c                   // MOVQ 0xb8(SP), R11;	mov	r11, qword ptr [rsp + 184]
	QUAD $0x0000008024b48b48                   // MOVQ 0x80(SP), SI;	mov	rsi, qword ptr [rsp + 128]
	JE   LBB1_5                                // je	.LBB1_5

LBB1_11:
	LONG $0x240c8b48             // MOVQ 0(SP), CX;	mov	rcx, qword ptr [rsp]
	LONG $0xcaaf0f48             // IMULQ DX, CX;	imul	rcx, rdx
	LONG $0x244c0348; BYTE $0x08 // ADDQ 0x8(SP), CX;	add	rcx, qword ptr [rsp + 8]
	LONG $0x245c8b48; BYTE $0x18 // MOVQ 0x18(SP), BX;	mov	rbx, qword ptr [rsp + 24]
	LONG $0x8b1c8d48             // LEAQ 0(BX)(CX*4), BX;	lea	rbx, [rbx + 4*rcx]
	QUAD $0x000000c0248c8b48     // MOVQ 0xc0(SP), CX;	mov	rcx, qword ptr [rsp + 192]

LBB1_4:
	LONG $0x0b10fac5               // ADCB CL, 0(BX);	vmovss	xmm1, dword ptr [rbx]
	LONG $0xb971c2c4; WORD $0x9304 // vfmadd231ss	xmm0, xmm1, dword ptr [r11 + 4*rdx]
	WORD $0xff48; BYTE $0xc2       // INCQ DX;	inc	rdx
	WORD $0x0148; BYTE $0xcb       // ADDQ CX, BX;	add	rbx, rcx
	WORD $0x3948; BYTE $0xd6       // CMPQ DX, SI;	cmp	rsi, rdx
	JNE  LBB1_4                    // jne	.LBB1_4
	JMP  LBB1_5                    // jmp	.LBB1_5

LBB1_13:
	NOP                      // lea	rsp, [rbp - 40]
	MOVQ 320(SP), BX         // pop	rbx
	MOVQ 312(SP), R12        // pop	r12
	MOVQ 304(SP), R13        // pop	r13
	MOVQ 296(SP), R14        // pop	r14
	MOVQ 288(SP), R15        // pop	r15
	NOP                      // pop	rbp
	WORD $0xf8c5; BYTE $0x77 // VZEROUPPER;	vzeroupper
	RET
