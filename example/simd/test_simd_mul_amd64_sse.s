//go:build !noasm && amd64
// Code generated by gocc devel -- DO NOT EDIT.
//
// Source file         : test_simd_mul.c
// Clang version       : Apple clang version 16.0.0 (clang-1600.0.26.3)
// Target architecture : amd64
// Compiler options    : [none]

#include "textflag.h"

DATA LCPI0_0<>+0x00(SB)/2, $0x00ff
DATA LCPI0_0<>+0x02(SB)/2, $0x00ff
DATA LCPI0_0<>+0x04(SB)/2, $0x00ff
DATA LCPI0_0<>+0x06(SB)/2, $0x00ff
DATA LCPI0_0<>+0x08(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0a(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0c(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0e(SB)/2, $0x00ff
GLOBL LCPI0_0<>(SB), (RODATA|NOPTR), $16

TEXT Â·uint8_simd_mul_sse(SB), NOSPLIT, $0-32
	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ size+24(FP), CX
	WORD $0xc985             // TESTL CX, CX                         // test	ecx, ecx
	JLE  LBB0_19             // <--                                  // jle	.LBB0_19
	NOP                      // (skipped)                            // push	rbp
	NOP                      // (skipped)                            // mov	rbp, rsp
	NOP                      // (skipped)                            // and	rsp, -8
	WORD $0x8941; BYTE $0xc8 // MOVL CX, R8                          // mov	r8d, ecx
	CMPQ R8, $0x8            // <--                                  // cmp	r8, 8
	JAE  LBB0_3              // <--                                  // jae	.LBB0_3
	XORL R9, R9              // <--                                  // xor	r9d, r9d

LBB0_14:
	WORD $0x2944; BYTE $0xc9 // SUBL R9, CX                          // sub	ecx, r9d
	MOVQ R9, R10             // <--                                  // mov	r10, r9
	NOTQ R10                 // <--                                  // not	r10
	ADDQ R8, R10             // <--                                  // add	r10, r8
	WORD $0xe183; BYTE $0x03 // ANDL $0x3, CX                        // and	ecx, 3
	JE   LBB0_16             // <--                                  // je	.LBB0_16

LBB0_15:
	LONG $0x04b60f42; BYTE $0x0e // MOVZX 0(SI)(R9*1), AX                // movzx	eax, byte ptr [rsi + r9]
	MULB 0(DI)(R9*1)             // <--                                  // mul	byte ptr [rdi + r9]
	MOVB AL, 0(DX)(R9*1)         // <--                                  // mov	byte ptr [rdx + r9], al
	INCQ R9                      // <--                                  // inc	r9
	DECQ CX                      // <--                                  // dec	rcx
	JNE  LBB0_15                 // <--                                  // jne	.LBB0_15

LBB0_16:
	CMPQ R10, $0x3 // <--                                  // cmp	r10, 3
	JB   LBB0_18   // <--                                  // jb	.LBB0_18

LBB0_17:
	LONG $0x04b60f42; BYTE $0x0e   // MOVZX 0(SI)(R9*1), AX                // movzx	eax, byte ptr [rsi + r9]
	MULB 0(DI)(R9*1)               // <--                                  // mul	byte ptr [rdi + r9]
	MOVB AL, 0(DX)(R9*1)           // <--                                  // mov	byte ptr [rdx + r9], al
	LONG $0x44b60f42; WORD $0x010e // MOVZX 0x1(SI)(R9*1), AX              // movzx	eax, byte ptr [rsi + r9 + 1]
	MULB 0x1(DI)(R9*1)             // <--                                  // mul	byte ptr [rdi + r9 + 1]
	MOVB AL, 0x1(DX)(R9*1)         // <--                                  // mov	byte ptr [rdx + r9 + 1], al
	LONG $0x44b60f42; WORD $0x020e // MOVZX 0x2(SI)(R9*1), AX              // movzx	eax, byte ptr [rsi + r9 + 2]
	MULB 0x2(DI)(R9*1)             // <--                                  // mul	byte ptr [rdi + r9 + 2]
	MOVB AL, 0x2(DX)(R9*1)         // <--                                  // mov	byte ptr [rdx + r9 + 2], al
	LONG $0x44b60f42; WORD $0x030e // MOVZX 0x3(SI)(R9*1), AX              // movzx	eax, byte ptr [rsi + r9 + 3]
	MULB 0x3(DI)(R9*1)             // <--                                  // mul	byte ptr [rdi + r9 + 3]
	MOVB AL, 0x3(DX)(R9*1)         // <--                                  // mov	byte ptr [rdx + r9 + 3], al
	ADDQ $0x4, R9                  // <--                                  // add	r9, 4
	CMPQ R8, R9                    // <--                                  // cmp	r8, r9
	JNE  LBB0_17                   // <--                                  // jne	.LBB0_17

LBB0_18:
	NOP // (skipped)                            // mov	rsp, rbp
	NOP // (skipped)                            // pop	rbp

LBB0_19:
	RET // <--                                  // ret

LBB0_3:
	MOVQ DX, AX    // <--                                  // mov	rax, rdx
	SUBQ DI, AX    // <--                                  // sub	rax, rdi
	XORL R9, R9    // <--                                  // xor	r9d, r9d
	CMPQ AX, $0x20 // <--                                  // cmp	rax, 32
	JB   LBB0_14   // <--                                  // jb	.LBB0_14
	MOVQ DX, AX    // <--                                  // mov	rax, rdx
	SUBQ SI, AX    // <--                                  // sub	rax, rsi
	CMPQ AX, $0x20 // <--                                  // cmp	rax, 32
	JB   LBB0_14   // <--                                  // jb	.LBB0_14
	CMPL R8, $0x20 // <--                                  // cmp	r8d, 32
	JAE  LBB0_7    // <--                                  // jae	.LBB0_7
	XORL R9, R9    // <--                                  // xor	r9d, r9d
	JMP  LBB0_11   // <--                                  // jmp	.LBB0_11

LBB0_7:
	WORD $0xc889             // MOVL CX, AX                          // mov	eax, ecx
	WORD $0xe083; BYTE $0x1f // ANDL $0x1f, AX                       // and	eax, 31
	MOVQ R8, R9              // <--                                  // mov	r9, r8
	SUBQ AX, R9              // <--                                  // sub	r9, rax
	XORL R10, R10            // <--                                  // xor	r10d, r10d
	MOVO LCPI0_0<>(SB), X0   // <--                                  // movdqa	xmm0, xmmword ptr [rip + .LCPI0_0]

LBB0_8:
	LONG $0x6f0f42f3; WORD $0x1724             // MOVDQU 0(DI)(R10*1), X4              // movdqu	xmm4, xmmword ptr [rdi + r10]
	LONG $0x6f0f42f3; WORD $0x175c; BYTE $0x10 // MOVDQU 0x10(DI)(R10*1), X3           // movdqu	xmm3, xmmword ptr [rdi + r10 + 16]
	LONG $0x6f0f42f3; WORD $0x160c             // MOVDQU 0(SI)(R10*1), X1              // movdqu	xmm1, xmmword ptr [rsi + r10]
	LONG $0x6f0f42f3; WORD $0x1654; BYTE $0x10 // MOVDQU 0x10(SI)(R10*1), X2           // movdqu	xmm2, xmmword ptr [rsi + r10 + 16]
	LONG $0xec6f0f66                           // MOVDQA X4, X5                        // movdqa	xmm5, xmm4
	LONG $0xed680f66                           // PUNPCKHBW X5, X5                     // punpckhbw	xmm5, xmm5
	LONG $0xf16f0f66                           // MOVDQA X1, X6                        // movdqa	xmm6, xmm1
	LONG $0xf6680f66                           // PUNPCKHBW X6, X6                     // punpckhbw	xmm6, xmm6
	LONG $0xf5d50f66                           // PMULLW X5, X6                        // pmullw	xmm6, xmm5
	LONG $0xf0db0f66                           // PAND X0, X6                          // pand	xmm6, xmm0
	LONG $0xe4600f66                           // PUNPCKLBW X4, X4                     // punpcklbw	xmm4, xmm4
	LONG $0xc9600f66                           // PUNPCKLBW X1, X1                     // punpcklbw	xmm1, xmm1
	LONG $0xccd50f66                           // PMULLW X4, X1                        // pmullw	xmm1, xmm4
	LONG $0xc8db0f66                           // PAND X0, X1                          // pand	xmm1, xmm0
	LONG $0xce670f66                           // PACKUSWB X6, X1                      // packuswb	xmm1, xmm6
	LONG $0xe36f0f66                           // MOVDQA X3, X4                        // movdqa	xmm4, xmm3
	LONG $0xe4680f66                           // PUNPCKHBW X4, X4                     // punpckhbw	xmm4, xmm4
	LONG $0xea6f0f66                           // MOVDQA X2, X5                        // movdqa	xmm5, xmm2
	LONG $0xed680f66                           // PUNPCKHBW X5, X5                     // punpckhbw	xmm5, xmm5
	LONG $0xecd50f66                           // PMULLW X4, X5                        // pmullw	xmm5, xmm4
	LONG $0xe8db0f66                           // PAND X0, X5                          // pand	xmm5, xmm0
	LONG $0xdb600f66                           // PUNPCKLBW X3, X3                     // punpcklbw	xmm3, xmm3
	LONG $0xd2600f66                           // PUNPCKLBW X2, X2                     // punpcklbw	xmm2, xmm2
	LONG $0xd3d50f66                           // PMULLW X3, X2                        // pmullw	xmm2, xmm3
	LONG $0xd0db0f66                           // PAND X0, X2                          // pand	xmm2, xmm0
	LONG $0xd5670f66                           // PACKUSWB X5, X2                      // packuswb	xmm2, xmm5
	LONG $0x7f0f42f3; WORD $0x120c             // MOVDQU X1, 0(DX)(R10*1)              // movdqu	xmmword ptr [rdx + r10], xmm1
	LONG $0x7f0f42f3; WORD $0x1254; BYTE $0x10 // MOVDQU X2, 0x10(DX)(R10*1)           // movdqu	xmmword ptr [rdx + r10 + 16], xmm2
	ADDQ $0x20, R10                            // <--                                  // add	r10, 32
	CMPQ R9, R10                               // <--                                  // cmp	r9, r10
	JNE  LBB0_8                                // <--                                  // jne	.LBB0_8
	WORD $0x8548; BYTE $0xc0                   // TESTQ AX, AX                         // test	rax, rax
	JE   LBB0_18                               // <--                                  // je	.LBB0_18
	CMPL AX, $0x8                              // <--                                  // cmp	eax, 8
	JB   LBB0_14                               // <--                                  // jb	.LBB0_14

LBB0_11:
	MOVQ R9, AX              // <--                                  // mov	rax, r9
	WORD $0x8941; BYTE $0xca // MOVL CX, R10                         // mov	r10d, ecx
	LONG $0x07e28341         // ANDL $0x7, R10                       // and	r10d, 7
	MOVQ R8, R9              // <--                                  // mov	r9, r8
	SUBQ R10, R9             // <--                                  // sub	r9, r10
	MOVO LCPI0_0<>(SB), X0   // <--                                  // movdqa	xmm0, xmmword ptr [rip + .LCPI0_0]

LBB0_12:
	LONG $0x0c7e0ff3; BYTE $0x07 // MOVQ 0(DI)(AX*1), X1                 // movq	xmm1, qword ptr [rdi + rax]
	LONG $0xc9600f66             // PUNPCKLBW X1, X1                     // punpcklbw	xmm1, xmm1
	LONG $0x147e0ff3; BYTE $0x06 // MOVQ 0(SI)(AX*1), X2                 // movq	xmm2, qword ptr [rsi + rax]
	LONG $0xd2600f66             // PUNPCKLBW X2, X2                     // punpcklbw	xmm2, xmm2
	LONG $0xd1d50f66             // PMULLW X1, X2                        // pmullw	xmm2, xmm1
	LONG $0xd0db0f66             // PAND X0, X2                          // pand	xmm2, xmm0
	LONG $0xd2670f66             // PACKUSWB X2, X2                      // packuswb	xmm2, xmm2
	LONG $0x14d60f66; BYTE $0x02 // MOVQ X2, 0(DX)(AX*1)                 // movq	qword ptr [rdx + rax], xmm2
	ADDQ $0x8, AX                // <--                                  // add	rax, 8
	CMPQ R9, AX                  // <--                                  // cmp	r9, rax
	JNE  LBB0_12                 // <--                                  // jne	.LBB0_12
	WORD $0x854d; BYTE $0xd2     // TESTQ R10, R10                       // test	r10, r10
	JNE  LBB0_14                 // <--                                  // jne	.LBB0_14
	JMP  LBB0_18                 // <--                                  // jmp	.LBB0_18
