//go:build !noasm && amd64
// Code generated by gocc devel -- DO NOT EDIT.
//
// Source file         : test_simd_mul.c
// Clang version       : Apple clang version 16.0.0 (clang-1600.0.26.3)
// Target architecture : amd64
// Compiler options    : -mavx2 -mfma

#include "textflag.h"

DATA LCPI0_0<>+0x00(SB)/2, $0x00ff
DATA LCPI0_0<>+0x02(SB)/2, $0x00ff
DATA LCPI0_0<>+0x04(SB)/2, $0x00ff
DATA LCPI0_0<>+0x06(SB)/2, $0x00ff
DATA LCPI0_0<>+0x08(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0a(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0c(SB)/2, $0x00ff
DATA LCPI0_0<>+0x0e(SB)/2, $0x00ff
DATA LCPI0_0<>+0x10(SB)/2, $0x00ff
DATA LCPI0_0<>+0x12(SB)/2, $0x00ff
DATA LCPI0_0<>+0x14(SB)/2, $0x00ff
DATA LCPI0_0<>+0x16(SB)/2, $0x00ff
DATA LCPI0_0<>+0x18(SB)/2, $0x00ff
DATA LCPI0_0<>+0x1a(SB)/2, $0x00ff
DATA LCPI0_0<>+0x1c(SB)/2, $0x00ff
DATA LCPI0_0<>+0x1e(SB)/2, $0x00ff
GLOBL LCPI0_0<>(SB), (RODATA|NOPTR), $32

DATA LCPI0_1<>+0x00(SB)/2, $0x00ff
GLOBL LCPI0_1<>(SB), (RODATA|NOPTR), $2

TEXT Â·uint8_simd_mul_avx2(SB), NOSPLIT, $0-32
	MOVQ input1+0(FP), DI
	MOVQ input2+8(FP), SI
	MOVQ output+16(FP), DX
	MOVQ size+24(FP), CX
	WORD $0xc985             // TESTL CX, CX                         // test	ecx, ecx
	JLE  LBB0_19             // <--                                  // jle	.LBB0_19
	NOP                      // (skipped)                            // push	rbp
	NOP                      // (skipped)                            // mov	rbp, rsp
	NOP                      // (skipped)                            // and	rsp, -8
	WORD $0x8941; BYTE $0xc8 // MOVL CX, R8                          // mov	r8d, ecx
	CMPQ R8, $0x10           // <--                                  // cmp	r8, 16
	JAE  LBB0_3              // <--                                  // jae	.LBB0_3
	XORL R9, R9              // <--                                  // xor	r9d, r9d

LBB0_14:
	WORD $0x2944; BYTE $0xc9 // SUBL R9, CX                          // sub	ecx, r9d
	MOVQ R9, R10             // <--                                  // mov	r10, r9
	NOTQ R10                 // <--                                  // not	r10
	ADDQ R8, R10             // <--                                  // add	r10, r8
	WORD $0xe183; BYTE $0x03 // ANDL $0x3, CX                        // and	ecx, 3
	JE   LBB0_16             // <--                                  // je	.LBB0_16

LBB0_15:
	LONG $0x04b60f42; BYTE $0x0e // MOVZX 0(SI)(R9*1), AX                // movzx	eax, byte ptr [rsi + r9]
	MULB 0(DI)(R9*1)             // <--                                  // mul	byte ptr [rdi + r9]
	MOVB AL, 0(DX)(R9*1)         // <--                                  // mov	byte ptr [rdx + r9], al
	INCQ R9                      // <--                                  // inc	r9
	DECQ CX                      // <--                                  // dec	rcx
	JNE  LBB0_15                 // <--                                  // jne	.LBB0_15

LBB0_16:
	CMPQ R10, $0x3 // <--                                  // cmp	r10, 3
	JB   LBB0_18   // <--                                  // jb	.LBB0_18

LBB0_17:
	LONG $0x04b60f42; BYTE $0x0e   // MOVZX 0(SI)(R9*1), AX                // movzx	eax, byte ptr [rsi + r9]
	MULB 0(DI)(R9*1)               // <--                                  // mul	byte ptr [rdi + r9]
	MOVB AL, 0(DX)(R9*1)           // <--                                  // mov	byte ptr [rdx + r9], al
	LONG $0x44b60f42; WORD $0x010e // MOVZX 0x1(SI)(R9*1), AX              // movzx	eax, byte ptr [rsi + r9 + 1]
	MULB 0x1(DI)(R9*1)             // <--                                  // mul	byte ptr [rdi + r9 + 1]
	MOVB AL, 0x1(DX)(R9*1)         // <--                                  // mov	byte ptr [rdx + r9 + 1], al
	LONG $0x44b60f42; WORD $0x020e // MOVZX 0x2(SI)(R9*1), AX              // movzx	eax, byte ptr [rsi + r9 + 2]
	MULB 0x2(DI)(R9*1)             // <--                                  // mul	byte ptr [rdi + r9 + 2]
	MOVB AL, 0x2(DX)(R9*1)         // <--                                  // mov	byte ptr [rdx + r9 + 2], al
	LONG $0x44b60f42; WORD $0x030e // MOVZX 0x3(SI)(R9*1), AX              // movzx	eax, byte ptr [rsi + r9 + 3]
	MULB 0x3(DI)(R9*1)             // <--                                  // mul	byte ptr [rdi + r9 + 3]
	MOVB AL, 0x3(DX)(R9*1)         // <--                                  // mov	byte ptr [rdx + r9 + 3], al
	ADDQ $0x4, R9                  // <--                                  // add	r9, 4
	CMPQ R8, R9                    // <--                                  // cmp	r8, r9
	JNE  LBB0_17                   // <--                                  // jne	.LBB0_17

LBB0_18:
	NOP // (skipped)                            // mov	rsp, rbp
	NOP // (skipped)                            // pop	rbp

LBB0_19:
	VZEROUPPER // <--                                  // vzeroupper
	RET        // <--                                  // ret

LBB0_3:
	MOVQ DX, AX    // <--                                  // mov	rax, rdx
	SUBQ DI, AX    // <--                                  // sub	rax, rdi
	XORL R9, R9    // <--                                  // xor	r9d, r9d
	CMPQ AX, $0x80 // <--                                  // cmp	rax, 128
	JB   LBB0_14   // <--                                  // jb	.LBB0_14
	MOVQ DX, AX    // <--                                  // mov	rax, rdx
	SUBQ SI, AX    // <--                                  // sub	rax, rsi
	CMPQ AX, $0x80 // <--                                  // cmp	rax, 128
	JB   LBB0_14   // <--                                  // jb	.LBB0_14
	CMPL R8, $0x80 // <--                                  // cmp	r8d, 128
	JAE  LBB0_7    // <--                                  // jae	.LBB0_7
	XORL R9, R9    // <--                                  // xor	r9d, r9d
	JMP  LBB0_11   // <--                                  // jmp	.LBB0_11

LBB0_7:
	WORD         $0xc889             // MOVL CX, AX                          // mov	eax, ecx
	WORD         $0xe083; BYTE $0x7f // ANDL $0x7f, AX                       // and	eax, 127
	MOVQ         R8, R9              // <--                                  // mov	r9, r8
	SUBQ         AX, R9              // <--                                  // sub	r9, rax
	XORL         R10, R10            // <--                                  // xor	r10d, r10d
	VPBROADCASTW LCPI0_1<>(SB), Y0   // <--                                  // vpbroadcastw	ymm0, word ptr [rip + .LCPI0_1]

LBB0_8:
	LONG $0x6f7ea1c4; WORD $0x171c             // VMOVDQU 0(DI)(R10*1), Y3             // vmovdqu	ymm3, ymmword ptr [rdi + r10]
	LONG $0x6f7ea1c4; WORD $0x1764; BYTE $0x20 // VMOVDQU 0x20(DI)(R10*1), Y4          // vmovdqu	ymm4, ymmword ptr [rdi + r10 + 32]
	LONG $0x6f7ea1c4; WORD $0x176c; BYTE $0x40 // VMOVDQU 0x40(DI)(R10*1), Y5          // vmovdqu	ymm5, ymmword ptr [rdi + r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x174c; BYTE $0x60 // VMOVDQU 0x60(DI)(R10*1), Y1          // vmovdqu	ymm1, ymmword ptr [rdi + r10 + 96]
	LONG $0x6f7ea1c4; WORD $0x1634             // VMOVDQU 0(SI)(R10*1), Y6             // vmovdqu	ymm6, ymmword ptr [rsi + r10]
	LONG $0x6f7ea1c4; WORD $0x167c; BYTE $0x20 // VMOVDQU 0x20(SI)(R10*1), Y7          // vmovdqu	ymm7, ymmword ptr [rsi + r10 + 32]
	LONG $0x6f7e21c4; WORD $0x1644; BYTE $0x40 // VMOVDQU 0x40(SI)(R10*1), Y8          // vmovdqu	ymm8, ymmword ptr [rsi + r10 + 64]
	LONG $0x6f7ea1c4; WORD $0x1654; BYTE $0x60 // VMOVDQU 0x60(SI)(R10*1), Y2          // vmovdqu	ymm2, ymmword ptr [rsi + r10 + 96]
	LONG $0xcb6865c5                           // VPUNPCKHBW Y3, Y3, Y9                // vpunpckhbw	ymm9, ymm3, ymm3
	LONG $0xd6684dc5                           // VPUNPCKHBW Y6, Y6, Y10               // vpunpckhbw	ymm10, ymm6, ymm6
	LONG $0xd52d41c4; BYTE $0xc9               // VPMULLW Y9, Y10, Y9                  // vpmullw	ymm9, ymm10, ymm9
	LONG $0xc8db35c5                           // VPAND Y0, Y9, Y9                     // vpand	ymm9, ymm9, ymm0
	LONG $0xdb60e5c5                           // VPUNPCKLBW Y3, Y3, Y3                // vpunpcklbw	ymm3, ymm3, ymm3
	LONG $0xf660cdc5                           // VPUNPCKLBW Y6, Y6, Y6                // vpunpcklbw	ymm6, ymm6, ymm6
	LONG $0xdbd5cdc5                           // VPMULLW Y3, Y6, Y3                   // vpmullw	ymm3, ymm6, ymm3
	LONG $0xd8dbe5c5                           // VPAND Y0, Y3, Y3                     // vpand	ymm3, ymm3, ymm0
	LONG $0x6765c1c4; BYTE $0xd9               // VPACKUSWB Y9, Y3, Y3                 // vpackuswb	ymm3, ymm3, ymm9
	LONG $0xf468ddc5                           // VPUNPCKHBW Y4, Y4, Y6                // vpunpckhbw	ymm6, ymm4, ymm4
	LONG $0xcf6845c5                           // VPUNPCKHBW Y7, Y7, Y9                // vpunpckhbw	ymm9, ymm7, ymm7
	LONG $0xf6d5b5c5                           // VPMULLW Y6, Y9, Y6                   // vpmullw	ymm6, ymm9, ymm6
	LONG $0xf0dbcdc5                           // VPAND Y0, Y6, Y6                     // vpand	ymm6, ymm6, ymm0
	LONG $0xe460ddc5                           // VPUNPCKLBW Y4, Y4, Y4                // vpunpcklbw	ymm4, ymm4, ymm4
	LONG $0xff60c5c5                           // VPUNPCKLBW Y7, Y7, Y7                // vpunpcklbw	ymm7, ymm7, ymm7
	LONG $0xe4d5c5c5                           // VPMULLW Y4, Y7, Y4                   // vpmullw	ymm4, ymm7, ymm4
	LONG $0xe0dbddc5                           // VPAND Y0, Y4, Y4                     // vpand	ymm4, ymm4, ymm0
	LONG $0xe667ddc5                           // VPACKUSWB Y6, Y4, Y4                 // vpackuswb	ymm4, ymm4, ymm6
	LONG $0xf568d5c5                           // VPUNPCKHBW Y5, Y5, Y6                // vpunpckhbw	ymm6, ymm5, ymm5
	LONG $0x683dc1c4; BYTE $0xf8               // VPUNPCKHBW Y8, Y8, Y7                // vpunpckhbw	ymm7, ymm8, ymm8
	LONG $0xf6d5c5c5                           // VPMULLW Y6, Y7, Y6                   // vpmullw	ymm6, ymm7, ymm6
	LONG $0xf0dbcdc5                           // VPAND Y0, Y6, Y6                     // vpand	ymm6, ymm6, ymm0
	LONG $0xed60d5c5                           // VPUNPCKLBW Y5, Y5, Y5                // vpunpcklbw	ymm5, ymm5, ymm5
	LONG $0x603dc1c4; BYTE $0xf8               // VPUNPCKLBW Y8, Y8, Y7                // vpunpcklbw	ymm7, ymm8, ymm8
	LONG $0xedd5c5c5                           // VPMULLW Y5, Y7, Y5                   // vpmullw	ymm5, ymm7, ymm5
	LONG $0xe8dbd5c5                           // VPAND Y0, Y5, Y5                     // vpand	ymm5, ymm5, ymm0
	LONG $0xee67d5c5                           // VPACKUSWB Y6, Y5, Y5                 // vpackuswb	ymm5, ymm5, ymm6
	LONG $0xf168f5c5                           // VPUNPCKHBW Y1, Y1, Y6                // vpunpckhbw	ymm6, ymm1, ymm1
	LONG $0xfa68edc5                           // VPUNPCKHBW Y2, Y2, Y7                // vpunpckhbw	ymm7, ymm2, ymm2
	LONG $0xf6d5c5c5                           // VPMULLW Y6, Y7, Y6                   // vpmullw	ymm6, ymm7, ymm6
	LONG $0xf0dbcdc5                           // VPAND Y0, Y6, Y6                     // vpand	ymm6, ymm6, ymm0
	LONG $0xc960f5c5                           // VPUNPCKLBW Y1, Y1, Y1                // vpunpcklbw	ymm1, ymm1, ymm1
	LONG $0xd260edc5                           // VPUNPCKLBW Y2, Y2, Y2                // vpunpcklbw	ymm2, ymm2, ymm2
	LONG $0xc9d5edc5                           // VPMULLW Y1, Y2, Y1                   // vpmullw	ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5                           // VPAND Y0, Y1, Y1                     // vpand	ymm1, ymm1, ymm0
	LONG $0xce67f5c5                           // VPACKUSWB Y6, Y1, Y1                 // vpackuswb	ymm1, ymm1, ymm6
	LONG $0x7f7ea1c4; WORD $0x121c             // VMOVDQU Y3, 0(DX)(R10*1)             // vmovdqu	ymmword ptr [rdx + r10], ymm3
	LONG $0x7f7ea1c4; WORD $0x1264; BYTE $0x20 // VMOVDQU Y4, 0x20(DX)(R10*1)          // vmovdqu	ymmword ptr [rdx + r10 + 32], ymm4
	LONG $0x7f7ea1c4; WORD $0x126c; BYTE $0x40 // VMOVDQU Y5, 0x40(DX)(R10*1)          // vmovdqu	ymmword ptr [rdx + r10 + 64], ymm5
	LONG $0x7f7ea1c4; WORD $0x124c; BYTE $0x60 // VMOVDQU Y1, 0x60(DX)(R10*1)          // vmovdqu	ymmword ptr [rdx + r10 + 96], ymm1
	SUBQ $-0x80, R10                           // <--                                  // sub	r10, -128
	CMPQ R9, R10                               // <--                                  // cmp	r9, r10
	JNE  LBB0_8                                // <--                                  // jne	.LBB0_8
	WORD $0x8548; BYTE $0xc0                   // TESTQ AX, AX                         // test	rax, rax
	JE   LBB0_18                               // <--                                  // je	.LBB0_18
	CMPL AX, $0x10                             // <--                                  // cmp	eax, 16
	JB   LBB0_14                               // <--                                  // jb	.LBB0_14

LBB0_11:
	MOVQ         R9, AX              // <--                                  // mov	rax, r9
	WORD         $0x8941; BYTE $0xca // MOVL CX, R10                         // mov	r10d, ecx
	LONG         $0x0fe28341         // ANDL $0xf, R10                       // and	r10d, 15
	MOVQ         R8, R9              // <--                                  // mov	r9, r8
	SUBQ         R10, R9             // <--                                  // sub	r9, r10
	VPBROADCASTW LCPI0_1<>(SB), Y0   // <--                                  // vpbroadcastw	ymm0, word ptr [rip + .LCPI0_1]

LBB0_12:
	LONG $0x307de2c4; WORD $0x070c // VPMOVZXBW 0(DI)(AX*1), Y1            // vpmovzxbw	ymm1, xmmword ptr [rdi + rax]
	LONG $0x307de2c4; WORD $0x0614 // VPMOVZXBW 0(SI)(AX*1), Y2            // vpmovzxbw	ymm2, xmmword ptr [rsi + rax]
	LONG $0xc9d5edc5               // VPMULLW Y1, Y2, Y1                   // vpmullw	ymm1, ymm2, ymm1
	LONG $0xc8dbf5c5               // VPAND Y0, Y1, Y1                     // vpand	ymm1, ymm1, ymm0
	LONG $0x397de3c4; WORD $0x01ca // VEXTRACTI128 $0x1, Y1, X2            // vextracti128	xmm2, ymm1, 1
	LONG $0xca67f1c5               // VPACKUSWB X2, X1, X1                 // vpackuswb	xmm1, xmm1, xmm2
	LONG $0x0c7ffac5; BYTE $0x02   // VMOVDQU X1, 0(DX)(AX*1)              // vmovdqu	xmmword ptr [rdx + rax], xmm1
	ADDQ $0x10, AX                 // <--                                  // add	rax, 16
	CMPQ R9, AX                    // <--                                  // cmp	r9, rax
	JNE  LBB0_12                   // <--                                  // jne	.LBB0_12
	WORD $0x854d; BYTE $0xd2       // TESTQ R10, R10                       // test	r10, r10
	JNE  LBB0_14                   // <--                                  // jne	.LBB0_14
	JMP  LBB0_18                   // <--                                  // jmp	.LBB0_18
