//go:build !noasm && arm64
// Code generated by gocc -- DO NOT EDIT.

#include "textflag.h"

TEXT Â·uint8_simd_mul_neon(SB), NOSPLIT, $0-32
	MOVD input1+0(FP), R0
	MOVD input2+8(FP), R1
	MOVD output+16(FP), R2
	MOVD size+24(FP), R3
	NOP                      // <--                                  // stp	x29, x30, [sp, #-16]!
	NOP                      // <--                                  // mov	x29, sp
	WORD $0x7100047f         // CMPW $1, R3                          // cmp	w3, #1
	BLT  LBB0_5              // <--                                  // b.lt	LBB0_5
	AND  $4294967295, R3, R8 // <--                                  // and	x8, x3, #0xffffffff
	CMP  $8, R8              // <--                                  // cmp	x8, #8
	BCS  LBB0_6              // <--                                  // b.hs	LBB0_6
	MOVD $0, R9              // <--                                  // mov	x9, #0

LBB0_3:
	ADD R9, R2, R10 // <--                                  // add	x10, x2, x9
	ADD R9, R1, R11 // <--                                  // add	x11, x1, x9
	ADD R9, R0, R12 // <--                                  // add	x12, x0, x9
	SUB R9, R8, R8  // <--                                  // sub	x8, x8, x9

LBB0_4:
	WORD $0x38401589 // MOVBU.P 1(R12), R9                   // ldrb	w9, [x12], #1
	WORD $0x3840156d // MOVBU.P 1(R11), R13                  // ldrb	w13, [x11], #1
	WORD $0x1b097da9 // MULW R9, R13, R9                     // mul	w9, w13, w9
	WORD $0x38001549 // MOVB.P R9, 1(R10)                    // strb	w9, [x10], #1
	SUBS $1, R8, R8  // <--                                  // subs	x8, x8, #1
	BNE  LBB0_4      // <--                                  // b.ne	LBB0_4

LBB0_5:
	NOP // <--                                  // ldp	x29, x30, [sp], #16
	RET // <--                                  // ret

LBB0_6:
	MOVD $0, R9      // <--                                  // mov	x9, #0
	SUB  R0, R2, R10 // <--                                  // sub	x10, x2, x0
	CMP  $64, R10    // <--                                  // cmp	x10, #64
	BCC  LBB0_3      // <--                                  // b.lo	LBB0_3
	SUB  R1, R2, R10 // <--                                  // sub	x10, x2, x1
	CMP  $64, R10    // <--                                  // cmp	x10, #64
	BCC  LBB0_3      // <--                                  // b.lo	LBB0_3
	CMP  $64, R8     // <--                                  // cmp	x8, #64
	BCS  LBB0_10     // <--                                  // b.hs	LBB0_10
	MOVD $0, R9      // <--                                  // mov	x9, #0
	JMP  LBB0_14     // <--                                  // b	LBB0_14

LBB0_10:
	AND  $63, R3, R10 // <--                                  // and	x10, x3, #0x3f
	SUB  R10, R8, R9  // <--                                  // sub	x9, x8, x10
	ADD  $32, R2, R11 // <--                                  // add	x11, x2, #32
	ADD  $32, R0, R12 // <--                                  // add	x12, x0, #32
	ADD  $32, R1, R13 // <--                                  // add	x13, x1, #32
	MOVD R9, R14      // <--                                  // mov	x14, x9

LBB0_11:
	WORD $0xad7f0580   // FLDPQ -32(R12), (F0, F1)             // ldp	q0, q1, [x12, #-32]
	WORD $0xacc20d82   // FLDPQ.P 64(R12), (F2, F3)            // ldp	q2, q3, [x12], #64
	WORD $0xad7f15a4   // FLDPQ -32(R13), (F4, F5)             // ldp	q4, q5, [x13, #-32]
	WORD $0xacc21da6   // FLDPQ.P 64(R13), (F6, F7)            // ldp	q6, q7, [x13], #64
	WORD $0x4e209c80   // VMUL V0.B16, V4.B16, V0.B16          // mul.16b	v0, v4, v0
	WORD $0x4e219ca1   // VMUL V1.B16, V5.B16, V1.B16          // mul.16b	v1, v5, v1
	WORD $0x4e229cc2   // VMUL V2.B16, V6.B16, V2.B16          // mul.16b	v2, v6, v2
	WORD $0x4e239ce3   // VMUL V3.B16, V7.B16, V3.B16          // mul.16b	v3, v7, v3
	WORD $0xad3f0560   // FSTPQ (F0, F1), -32(R11)             // stp	q0, q1, [x11, #-32]
	WORD $0xac820d62   // FSTPQ.P (F2, F3), 64(R11)            // stp	q2, q3, [x11], #64
	SUBS $64, R14, R14 // <--                                  // subs	x14, x14, #64
	BNE  LBB0_11       // <--                                  // b.ne	LBB0_11
	CBZ  R10, LBB0_5   // <--                                  // cbz	x10, LBB0_5
	CMP  $8, R10       // <--                                  // cmp	x10, #8
	BCC  LBB0_3        // <--                                  // b.lo	LBB0_3

LBB0_14:
	MOVD R9, R14       // <--                                  // mov	x14, x9
	AND  $7, R3, R10   // <--                                  // and	x10, x3, #0x7
	ADD  R9, R0, R11   // <--                                  // add	x11, x0, x9
	ADD  R9, R1, R12   // <--                                  // add	x12, x1, x9
	ADD  R9, R2, R13   // <--                                  // add	x13, x2, x9
	SUB  R10, R8, R9   // <--                                  // sub	x9, x8, x10
	ADD  R10, R14, R14 // <--                                  // add	x14, x14, x10
	SUB  R8, R14, R14  // <--                                  // sub	x14, x14, x8

LBB0_15:
	WORD $0xfc408560  // FMOVD.P 8(R11), F0                   // ldr	d0, [x11], #8
	WORD $0xfc408581  // FMOVD.P 8(R12), F1                   // ldr	d1, [x12], #8
	WORD $0x0e209c20  // VMUL V0.B8, V1.B8, V0.B8             // mul.8b	v0, v1, v0
	WORD $0xfc0085a0  // FMOVD.P F0, 8(R13)                   // str	d0, [x13], #8
	ADDS $8, R14, R14 // <--                                  // adds	x14, x14, #8
	BNE  LBB0_15      // <--                                  // b.ne	LBB0_15
	CBNZ R10, LBB0_3  // <--                                  // cbnz	x10, LBB0_3
	JMP  LBB0_5       // <--                                  // b	LBB0_5
