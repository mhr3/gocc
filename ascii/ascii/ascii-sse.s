//go:build !noasm && amd64
// Code generated by gocc -- DO NOT EDIT.
//
// Source file         : ascii-sse.c
// Clang version       : Apple clang version 15.0.0 (clang-1500.3.9.4)
// Target architecture : amd64
// Compiler options    : [none]

#include "textflag.h"

TEXT Â·isAsciiSse(SB), 0, $8-17
	MOVQ src+0(FP), DI
	MOVQ len+8(FP), SI
	NOP                // (skipped)                            // push	rbp
	NOP                // (skipped)                            // mov	rbp, rsp
	MOVQ BX, 0(SP)     // <--                                  // push	rbx
	ANDQ $-0x8, SP     // <--                                  // and	rsp, -8
	XORL DX, DX        // <--                                  // xor	edx, edx
	MOVQ SI, CX        // <--                                  // mov	rcx, rsi

LBB0_1:
	LEAQ     0x10(DX), AX            // <--                                  // lea	rax, [rdx + 16]
	CMPQ     AX, SI                  // <--                                  // cmp	rax, rsi
	JA       LBB0_5                  // <--                                  // ja	.LBB0_5
	LONG     $0x046f0ff3; BYTE $0x17 // MOVDQU 0(DI)(DX*1), X0               // movdqu	xmm0, xmmword ptr [rdi + rdx]
	PMOVMSKB X0, R8                  // <--                                  // pmovmskb	r8d, xmm0
	ADDQ     $-0x10, CX              // <--                                  // add	rcx, -16
	MOVQ     AX, DX                  // <--                                  // mov	rdx, rax
	WORD     $0x8545; BYTE $0xc0     // TESTL R8, R8                         // test	r8d, r8d
	JE       LBB0_1                  // <--                                  // je	.LBB0_1
	XORL     AX, AX                  // <--                                  // xor	eax, eax

LBB0_4:
	NOP                 // (skipped)                            // lea	rsp, [rbp - 8]
	MOVQ 0(SP), BX      // <--                                  // pop	rbx
	NOP                 // (skipped)                            // pop	rbp
	MOVB AX, ret+16(FP) // <--
	RET                 // <--                                  // ret

LBB0_5:
	MOVQ SI, R8   // <--                                  // mov	r8, rsi
	WORD $0x01b0  // MOVL $0x1, AL                        // mov	al, 1
	SUBQ DX, R8   // <--                                  // sub	r8, rdx
	JBE  LBB0_4   // <--                                  // jbe	.LBB0_4
	CMPQ R8, $0x8 // <--                                  // cmp	r8, 8
	JAE  LBB0_8   // <--                                  // jae	.LBB0_8
	XORL R9, R9   // <--                                  // xor	r9d, r9d
	MOVQ DX, CX   // <--                                  // mov	rcx, rdx
	JMP  LBB0_23  // <--                                  // jmp	.LBB0_23

LBB0_8:
	CMPQ R8, $0x20 // <--                                  // cmp	r8, 32
	JAE  LBB0_10   // <--                                  // jae	.LBB0_10
	XORL R9, R9    // <--                                  // xor	r9d, r9d
	XORL AX, AX    // <--                                  // xor	eax, eax
	JMP  LBB0_19   // <--                                  // jmp	.LBB0_19

LBB0_10:
	LEAQ -0x20(R8), R9 // <--                                  // lea	r9, [r8 - 32]
	LEAQ -0x20(R8), AX // <--                                  // lea	rax, [r8 - 32]
	MOVQ AX, R11       // <--                                  // mov	r11, rax
	SHRQ $0x5, R11     // <--                                  // shr	r11, 5
	INCQ R11           // <--                                  // inc	r11
	CMPQ AX, $0x60     // <--                                  // cmp	rax, 96
	JAE  LBB0_12       // <--                                  // jae	.LBB0_12
	PXOR X0, X0        // <--                                  // pxor	xmm0, xmm0
	XORL R10, R10      // <--                                  // xor	r10d, r10d
	PXOR X1, X1        // <--                                  // pxor	xmm1, xmm1
	JMP  LBB0_14       // <--                                  // jmp	.LBB0_14

LBB0_12:
	MOVQ R9, AX    // <--                                  // mov	rax, r9
	SHRQ $0x5, AX  // <--                                  // shr	rax, 5
	INCQ AX        // <--                                  // inc	rax
	ANDQ $-0x4, AX // <--                                  // and	rax, -4
	PXOR X0, X0    // <--                                  // pxor	xmm0, xmm0
	XORL R10, R10  // <--                                  // xor	r10d, r10d
	PXOR X1, X1    // <--                                  // pxor	xmm1, xmm1

LBB0_13:
	LEAQ 0(DI)(R10*1), BX          // <--                                  // lea	rbx, [rdi + r10]
	LONG $0x146f0ff3; BYTE $0x1a   // MOVDQU 0(DX)(BX*1), X2               // movdqu	xmm2, xmmword ptr [rdx + rbx]
	POR  X0, X2                    // <--                                  // por	xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x101a // MOVDQU 0x10(DX)(BX*1), X0            // movdqu	xmm0, xmmword ptr [rdx + rbx + 16]
	POR  X1, X0                    // <--                                  // por	xmm0, xmm1
	LONG $0x4c6f0ff3; WORD $0x201a // MOVDQU 0x20(DX)(BX*1), X1            // movdqu	xmm1, xmmword ptr [rdx + rbx + 32]
	LONG $0x5c6f0ff3; WORD $0x301a // MOVDQU 0x30(DX)(BX*1), X3            // movdqu	xmm3, xmmword ptr [rdx + rbx + 48]
	LONG $0x646f0ff3; WORD $0x401a // MOVDQU 0x40(DX)(BX*1), X4            // movdqu	xmm4, xmmword ptr [rdx + rbx + 64]
	POR  X1, X4                    // <--                                  // por	xmm4, xmm1
	POR  X2, X4                    // <--                                  // por	xmm4, xmm2
	LONG $0x546f0ff3; WORD $0x501a // MOVDQU 0x50(DX)(BX*1), X2            // movdqu	xmm2, xmmword ptr [rdx + rbx + 80]
	POR  X3, X2                    // <--                                  // por	xmm2, xmm3
	POR  X0, X2                    // <--                                  // por	xmm2, xmm0
	LONG $0x446f0ff3; WORD $0x601a // MOVDQU 0x60(DX)(BX*1), X0            // movdqu	xmm0, xmmword ptr [rdx + rbx + 96]
	POR  X4, X0                    // <--                                  // por	xmm0, xmm4
	LONG $0x4c6f0ff3; WORD $0x701a // MOVDQU 0x70(DX)(BX*1), X1            // movdqu	xmm1, xmmword ptr [rdx + rbx + 112]
	POR  X2, X1                    // <--                                  // por	xmm1, xmm2
	SUBQ $-0x80, R10               // <--                                  // sub	r10, -128
	ADDQ $-0x4, AX                 // <--                                  // add	rax, -4
	JNE  LBB0_13                   // <--                                  // jne	.LBB0_13

LBB0_14:
	MOVQ R8, AX      // <--                                  // mov	rax, r8
	ANDQ $-0x20, AX  // <--                                  // and	rax, -32
	LONG $0x03c3f641 // TESTL $0x3, R11                      // test	r11b, 3
	JE   LBB0_17     // <--                                  // je	.LBB0_17
	SHRL $0x5, R9    // <--                                  // shr	r9b, 5
	INCL R9          // <--                                  // inc	r9b
	LONG $0xc9b60f45 // MOVZX R9, R9                         // movzx	r9d, r9b
	LONG $0x03e18341 // ANDL $0x3, R9                        // and	r9d, 3
	SHLQ $0x5, R9    // <--                                  // shl	r9, 5
	ADDQ DI, R10     // <--                                  // add	r10, rdi
	ADDQ $0x10, R10  // <--                                  // add	r10, 16
	XORL R11, R11    // <--                                  // xor	r11d, r11d

LBB0_16:
	LEAQ 0(R10)(R11*1), BX         // <--                                  // lea	rbx, [r10 + r11]
	LONG $0x546f0ff3; WORD $0xf01a // MOVDQU -0x10(DX)(BX*1), X2           // movdqu	xmm2, xmmword ptr [rdx + rbx - 16]
	POR  X2, X0                    // <--                                  // por	xmm0, xmm2
	LONG $0x146f0ff3; BYTE $0x1a   // MOVDQU 0(DX)(BX*1), X2               // movdqu	xmm2, xmmword ptr [rdx + rbx]
	POR  X2, X1                    // <--                                  // por	xmm1, xmm2
	ADDQ $0x20, R11                // <--                                  // add	r11, 32
	CMPQ R9, R11                   // <--                                  // cmp	r9, r11
	JNE  LBB0_16                   // <--                                  // jne	.LBB0_16

LBB0_17:
	POR    X1, X0                  // <--                                  // por	xmm0, xmm1
	PSHUFD $0xee, X0, X1           // <--                                  // pshufd	xmm1, xmm0, 238
	POR    X0, X1                  // <--                                  // por	xmm1, xmm0
	PSHUFD $0x55, X1, X0           // <--                                  // pshufd	xmm0, xmm1, 85
	POR    X1, X0                  // <--                                  // por	xmm0, xmm1
	LONG   $0xc86f0f66             // MOVDQA X0, X1                        // movdqa	xmm1, xmm0
	LONG   $0xd1720f66; BYTE $0x10 // PSRLD $0x10, X1                      // psrld	xmm1, 16
	POR    X0, X1                  // <--                                  // por	xmm1, xmm0
	LONG   $0xc16f0f66             // MOVDQA X1, X0                        // movdqa	xmm0, xmm1
	LONG   $0xd0710f66; BYTE $0x08 // PSRLW $0x8, X0                       // psrlw	xmm0, 8
	POR    X1, X0                  // <--                                  // por	xmm0, xmm1
	MOVD   X0, R9                  // <--                                  // movd	r9d, xmm0
	CMPQ   R8, AX                  // <--                                  // cmp	r8, rax
	JE     LBB0_24                 // <--                                  // je	.LBB0_24
	LONG   $0x18c0f641             // TESTL $0x18, R8                      // test	r8b, 24
	JE     LBB0_22                 // <--                                  // je	.LBB0_22

LBB0_19:
	MOVQ SI, CX      // <--                                  // mov	rcx, rsi
	ANDQ $-0x8, CX   // <--                                  // and	rcx, -8
	LONG $0xc1b60f45 // MOVZX R9, R8                         // movzx	r8d, r9b
	MOVD R8, X0      // <--                                  // movd	xmm0, r8d
	ADDQ DX, AX      // <--                                  // add	rax, rdx

LBB0_20:
	MOVQ   0(DI)(AX*1), X1         // <--                                  // movq	xmm1, qword ptr [rdi + rax]
	POR    X1, X0                  // <--                                  // por	xmm0, xmm1
	ADDQ   $0x8, AX                // <--                                  // add	rax, 8
	CMPQ   CX, AX                  // <--                                  // cmp	rcx, rax
	JNE    LBB0_20                 // <--                                  // jne	.LBB0_20
	PSHUFD $0x55, X0, X1           // <--                                  // pshufd	xmm1, xmm0, 85
	POR    X0, X1                  // <--                                  // por	xmm1, xmm0
	LONG   $0xc16f0f66             // MOVDQA X1, X0                        // movdqa	xmm0, xmm1
	LONG   $0xd0720f66; BYTE $0x10 // PSRLD $0x10, X0                      // psrld	xmm0, 16
	POR    X1, X0                  // <--                                  // por	xmm0, xmm1
	LONG   $0xc86f0f66             // MOVDQA X0, X1                        // movdqa	xmm1, xmm0
	LONG   $0xd1710f66; BYTE $0x08 // PSRLW $0x8, X1                       // psrlw	xmm1, 8
	POR    X0, X1                  // <--                                  // por	xmm1, xmm0
	MOVD   X1, R9                  // <--                                  // movd	r9d, xmm1
	LONG   $0x07c6f640             // TESTL $0x7, SI                       // test	sil, 7
	JNE    LBB0_23                 // <--                                  // jne	.LBB0_23
	JMP    LBB0_24                 // <--                                  // jmp	.LBB0_24

LBB0_22:
	ANDQ $-0x20, CX // <--                                  // and	rcx, -32
	ADDQ DX, CX     // <--                                  // add	rcx, rdx

LBB0_23:
	LONG $0x0f0c0a44 // ORB 0(DI)(CX*1), R9                  // or	r9b, byte ptr [rdi + rcx]
	INCQ CX          // <--                                  // inc	rcx
	CMPQ CX, SI      // <--                                  // cmp	rcx, rsi
	JB   LBB0_23     // <--                                  // jb	.LBB0_23

LBB0_24:
	WORD $0x8445; BYTE $0xc9 // TESTL R9, R9                         // test	r9b, r9b
	WORD $0x990f; BYTE $0xc0 // SETNS AL                             // setns	al
	NOP                      // (skipped)                            // lea	rsp, [rbp - 8]
	MOVQ 0(SP), BX           // <--                                  // pop	rbx
	NOP                      // (skipped)                            // pop	rbp
	MOVB AX, ret+16(FP)      // <--
	RET                      // <--                                  // ret
