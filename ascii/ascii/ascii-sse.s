//go:build !noasm && amd64
// Code generated by gocc devel -- DO NOT EDIT.
//
// Source file         : ascii-sse.c
// Clang version       : Apple clang version 16.0.0 (clang-1600.0.26.3)
// Target architecture : amd64
// Compiler options    : [none]

#include "textflag.h"

TEXT Â·isAsciiSse(SB), NOSPLIT, $0-17
	MOVQ src+0(FP), DI
	MOVQ len+8(FP), SI
	NOP                // (skipped)                            // push	rbp
	NOP                // (skipped)                            // mov	rbp, rsp
	NOP                // (skipped)                            // and	rsp, -8
	LEAQ 0x10(DI), R8  // <--                                  // lea	r8, [rdi + 16]
	XORL DX, DX        // <--                                  // xor	edx, edx
	MOVQ SI, CX        // <--                                  // mov	rcx, rsi

LBB0_1:
	LEAQ 0x10(DX), AX              // <--                                  // lea	rax, [rdx + 16]
	CMPQ AX, SI                    // <--                                  // cmp	rax, rsi
	JA   LBB0_2                    // <--                                  // ja	.LBB0_2
	LONG $0x6f0f41f3; WORD $0xf040 // MOVDQU -0x10(R8), X0                 // movdqu	xmm0, xmmword ptr [r8 - 16]
	LONG $0xd70f4466; BYTE $0xc8   // PMOVMSKB X0, R9                      // pmovmskb	r9d, xmm0
	ADDQ $-0x10, CX                // <--                                  // add	rcx, -16
	ADDQ $0x10, R8                 // <--                                  // add	r8, 16
	MOVQ AX, DX                    // <--                                  // mov	rdx, rax
	WORD $0x8545; BYTE $0xc9       // TESTL R9, R9                         // test	r9d, r9d
	JE   LBB0_1                    // <--                                  // je	.LBB0_1
	XORL AX, AX                    // <--                                  // xor	eax, eax

LBB0_19:
	NOP                 // (skipped)                            // mov	rsp, rbp
	NOP                 // (skipped)                            // pop	rbp
	MOVB AX, ret+16(FP) // <--
	RET                 // <--                                  // ret

LBB0_2:
	MOVQ SI, R9   // <--                                  // mov	r9, rsi
	WORD $0x01b0  // MOVL $0x1, AL                        // mov	al, 1
	SUBQ DX, R9   // <--                                  // sub	r9, rdx
	JBE  LBB0_19  // <--                                  // jbe	.LBB0_19
	CMPQ R9, $0x8 // <--                                  // cmp	r9, 8
	JAE  LBB0_5   // <--                                  // jae	.LBB0_5
	XORL R8, R8   // <--                                  // xor	r8d, r8d
	MOVQ DX, CX   // <--                                  // mov	rcx, rdx
	JMP  LBB0_10  // <--                                  // jmp	.LBB0_10

LBB0_5:
	CMPQ R9, $0x20 // <--                                  // cmp	r9, 32
	JAE  LBB0_12   // <--                                  // jae	.LBB0_12
	XORL R8, R8    // <--                                  // xor	r8d, r8d
	XORL AX, AX    // <--                                  // xor	eax, eax
	JMP  LBB0_7    // <--                                  // jmp	.LBB0_7

LBB0_12:
	MOVQ R9, AX      // <--                                  // mov	rax, r9
	ANDQ $-0x20, AX  // <--                                  // and	rax, -32
	MOVQ R9, R10     // <--                                  // mov	r10, r9
	ANDQ $-0x20, R10 // <--                                  // and	r10, -32
	LONG $0xc0ef0f66 // PXOR X0, X0                          // pxor	xmm0, xmm0
	LONG $0xc9ef0f66 // PXOR X1, X1                          // pxor	xmm1, xmm1

LBB0_13:
	LONG $0x6f0f41f3; WORD $0xf050 // MOVDQU -0x10(R8), X2                 // movdqu	xmm2, xmmword ptr [r8 - 16]
	LONG $0xc2eb0f66               // POR X2, X0                           // por	xmm0, xmm2
	LONG $0x6f0f41f3; BYTE $0x10   // MOVDQU 0(R8), X2                     // movdqu	xmm2, xmmword ptr [r8]
	LONG $0xcaeb0f66               // POR X2, X1                           // por	xmm1, xmm2
	ADDQ $0x20, R8                 // <--                                  // add	r8, 32
	ADDQ $-0x20, R10               // <--                                  // add	r10, -32
	JNE  LBB0_13                   // <--                                  // jne	.LBB0_13
	LONG $0xc8eb0f66               // POR X0, X1                           // por	xmm1, xmm0
	LONG $0xc1700f66; BYTE $0xee   // PSHUFD $0xee, X1, X0                 // pshufd	xmm0, xmm1, 238
	LONG $0xc1eb0f66               // POR X1, X0                           // por	xmm0, xmm1
	LONG $0xc8700f66; BYTE $0x55   // PSHUFD $0x55, X0, X1                 // pshufd	xmm1, xmm0, 85
	LONG $0xc8eb0f66               // POR X0, X1                           // por	xmm1, xmm0
	LONG $0xc16f0f66               // MOVDQA X1, X0                        // movdqa	xmm0, xmm1
	LONG $0xd0720f66; BYTE $0x10   // PSRLD $0x10, X0                      // psrld	xmm0, 16
	LONG $0xc1eb0f66               // POR X1, X0                           // por	xmm0, xmm1
	LONG $0xc86f0f66               // MOVDQA X0, X1                        // movdqa	xmm1, xmm0
	LONG $0xd1710f66; BYTE $0x08   // PSRLW $0x8, X1                       // psrlw	xmm1, 8
	LONG $0xc8eb0f66               // POR X0, X1                           // por	xmm1, xmm0
	LONG $0x7e0f4166; BYTE $0xc8   // MOVD X1, R8                          // movd	r8d, xmm1
	CMPQ R9, AX                    // <--                                  // cmp	r9, rax
	JE   LBB0_11                   // <--                                  // je	.LBB0_11
	LONG $0x18c1f641               // TESTL $0x18, R9                      // test	r9b, 24
	JE   LBB0_16                   // <--                                  // je	.LBB0_16

LBB0_7:
	MOVQ SI, CX                  // <--                                  // mov	rcx, rsi
	ANDQ $-0x8, CX               // <--                                  // and	rcx, -8
	LONG $0xc0b60f45             // MOVZX R8, R8                         // movzx	r8d, r8b
	LONG $0x6e0f4166; BYTE $0xc0 // MOVD R8, X0                          // movd	xmm0, r8d
	ADDQ DX, AX                  // <--                                  // add	rax, rdx

LBB0_8:
	LONG $0x0c7e0ff3; BYTE $0x07 // MOVQ 0(DI)(AX*1), X1                 // movq	xmm1, qword ptr [rdi + rax]
	LONG $0xc1eb0f66             // POR X1, X0                           // por	xmm0, xmm1
	ADDQ $0x8, AX                // <--                                  // add	rax, 8
	CMPQ CX, AX                  // <--                                  // cmp	rcx, rax
	JNE  LBB0_8                  // <--                                  // jne	.LBB0_8
	LONG $0xc8700f66; BYTE $0x55 // PSHUFD $0x55, X0, X1                 // pshufd	xmm1, xmm0, 85
	LONG $0xc8eb0f66             // POR X0, X1                           // por	xmm1, xmm0
	LONG $0xc16f0f66             // MOVDQA X1, X0                        // movdqa	xmm0, xmm1
	LONG $0xd0720f66; BYTE $0x10 // PSRLD $0x10, X0                      // psrld	xmm0, 16
	LONG $0xc1eb0f66             // POR X1, X0                           // por	xmm0, xmm1
	LONG $0xc86f0f66             // MOVDQA X0, X1                        // movdqa	xmm1, xmm0
	LONG $0xd1710f66; BYTE $0x08 // PSRLW $0x8, X1                       // psrlw	xmm1, 8
	LONG $0xc8eb0f66             // POR X0, X1                           // por	xmm1, xmm0
	LONG $0x7e0f4166; BYTE $0xc8 // MOVD X1, R8                          // movd	r8d, xmm1
	LONG $0x07c6f640             // TESTL $0x7, SI                       // test	sil, 7
	JNE  LBB0_10                 // <--                                  // jne	.LBB0_10
	JMP  LBB0_11                 // <--                                  // jmp	.LBB0_11

LBB0_16:
	ANDQ $-0x20, CX // <--                                  // and	rcx, -32
	ADDQ DX, CX     // <--                                  // add	rcx, rdx

LBB0_10:
	ORB  0(DI)(CX*1), R8 // <--                                  // or	r8b, byte ptr [rdi + rcx]
	INCQ CX              // <--                                  // inc	rcx
	CMPQ CX, SI          // <--                                  // cmp	rcx, rsi
	JB   LBB0_10         // <--                                  // jb	.LBB0_10

LBB0_11:
	WORD $0x8445; BYTE $0xc0 // TESTL R8, R8                         // test	r8b, r8b
	WORD $0x990f; BYTE $0xc0 // SETNS AL                             // setns	al
	NOP                      // (skipped)                            // mov	rsp, rbp
	NOP                      // (skipped)                            // pop	rbp
	MOVB AX, ret+16(FP)      // <--
	RET                      // <--                                  // ret
