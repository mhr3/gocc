//go:build !noasm && arm64
// Code generated by gocc devel -- DO NOT EDIT.
//
// Source file         : ascii-neon.c
// Clang version       : Apple clang version 16.0.0 (clang-1600.0.26.3)
// Target architecture : arm64
// Compiler options    : [none]

#include "textflag.h"

TEXT ·IsASCII(SB), NOSPLIT, $0-17
	MOVD data+0(FP), R0
	MOVD length+8(FP), R1
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	CMP  $8, R1           // <--                                  // cmp	x1, #8
	NOP                   // (skipped)                            // mov	x29, sp
	BCC  LBB0_12          // <--                                  // b.lo	.LBB0_12
	ADD  R1, R0, R9       // <--                                  // add	x9, x0, x1
	AND  $63, R1, R8      // <--                                  // and	x8, x1, #0x3f
	SUB  R8, R9, R9       // <--                                  // sub	x9, x9, x8
	CMP  R0, R9           // <--                                  // cmp	x9, x0
	BLS  LBB0_5           // <--                                  // b.ls	.LBB0_5
	WORD $0x4f04e400      // VMOVI $128, V0.B16                   // movi	v0.16b, #128

LBB0_3:
	WORD  $0x4c402001            // VLD1 (R0), [V1.B16, V2.B16, V3.B16, V4.B16] // ld1	{ v1.16b, v2.16b, v3.16b, v4.16b }, [x0]
	VORR  V2.B16, V1.B16, V5.B16 // <--                                  // orr	v5.16b, v1.16b, v2.16b
	VORR  V3.B16, V4.B16, V1.B16 // <--                                  // orr	v1.16b, v4.16b, v3.16b
	VORR  V1.B16, V5.B16, V1.B16 // <--                                  // orr	v1.16b, v5.16b, v1.16b
	VAND  V0.B16, V1.B16, V1.B16 // <--                                  // and	v1.16b, v1.16b, v0.16b
	WORD  $0x6eb0a821            // VUMAXV V1.S4, V1                     // umaxv	s1, v1.4s
	FMOVS F1, R10                // <--                                  // fmov	w10, s1
	CBNZW R10, LBB0_14           // <--                                  // cbnz	w10, .LBB0_14
	ADD   $64, R0, R0            // <--                                  // add	x0, x0, #64
	CMP   R9, R0                 // <--                                  // cmp	x0, x9
	BCC   LBB0_3                 // <--                                  // b.lo	.LBB0_3

LBB0_5:
	ADD  R8, R0, R8  // <--                                  // add	x8, x0, x8
	AND  $15, R1, R1 // <--                                  // and	x1, x1, #0xf
	SUB  R1, R8, R8  // <--                                  // sub	x8, x8, x1
	CMP  R8, R0      // <--                                  // cmp	x0, x8
	BCS  LBB0_9      // <--                                  // b.hs	.LBB0_9
	WORD $0x4f04e400 // VMOVI $128, V0.B16                   // movi	v0.16b, #128

LBB0_7:
	WORD  $0x3dc00001            // FMOVQ (R0), F1                       // ldr	q1, [x0]
	VAND  V0.B16, V1.B16, V1.B16 // <--                                  // and	v1.16b, v1.16b, v0.16b
	WORD  $0x6eb0a821            // VUMAXV V1.S4, V1                     // umaxv	s1, v1.4s
	FMOVS F1, R9                 // <--                                  // fmov	w9, s1
	CBNZW R9, LBB0_14            // <--                                  // cbnz	w9, .LBB0_14
	ADD   $16, R0, R0            // <--                                  // add	x0, x0, #16
	CMP   R8, R0                 // <--                                  // cmp	x0, x8
	BCC   LBB0_7                 // <--                                  // b.lo	.LBB0_7

LBB0_9:
	SUBS $8, R1, R8                    // <--                                  // subs	x8, x1, #8
	BCC  LBB0_12                       // <--                                  // b.lo	.LBB0_12
	WORD $0xf8408409                   // MOVD.P 8(R0), R9                     // ldr	x9, [x0], #8
	AND  $-9187201950435737472, R9, R9 // <--                                  // and	x9, x9, #0x8080808080808080
	CBNZ R9, LBB0_14                   // <--                                  // cbnz	x9, .LBB0_14
	MOVD R8, R1                        // <--                                  // mov	x1, x8

LBB0_12:
	MOVW $2155905152, R8 // <--                                  // mov	w8, #-2139062144
	SUBS $4, R1, R9      // <--                                  // subs	x9, x1, #4
	BCC  LBB0_16         // <--                                  // b.lo	.LBB0_16
	WORD $0xb940000a     // MOVWU (R0), R10                      // ldr	w10, [x0]
	TSTW R8, R10         // <--                                  // tst	w10, w8
	BEQ  LBB0_15         // <--                                  // b.eq	.LBB0_15

LBB0_14:
	MOVW ZR, R0         // <--                                  // mov	w0, wzr
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB R0, ret+16(FP) // <--
	RET                 // <--                                  // ret

LBB0_15:
	ADD  $4, R0, R0 // <--                                  // add	x0, x0, #4
	MOVD R9, R1     // <--                                  // mov	x1, x9

LBB0_16:
	CMP   $1, R1          // <--                                  // cmp	x1, #1
	BEQ   LBB0_20         // <--                                  // b.eq	.LBB0_20
	CMP   $2, R1          // <--                                  // cmp	x1, #2
	BEQ   LBB0_21         // <--                                  // b.eq	.LBB0_21
	CMP   $3, R1          // <--                                  // cmp	x1, #3
	BNE   LBB0_22         // <--                                  // b.ne	.LBB0_22
	WORD  $0x79400009     // MOVHU (R0), R9                       // ldrh	w9, [x0]
	WORD  $0x3940080a     // MOVBU 2(R0), R10                     // ldrb	w10, [x0, #2]
	ORRW  R10<<16, R9, R9 // <--                                  // orr	w9, w9, w10, lsl #16
	TSTW  R8, R9          // <--                                  // tst	w9, w8
	CSETW EQ, R0          // <--                                  // cset	w0, eq
	NOP                   // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB  R0, ret+16(FP)  // <--
	RET                   // <--                                  // ret

LBB0_20:
	WORD  $0x39400009    // MOVBU (R0), R9                       // ldrb	w9, [x0]
	TSTW  R8, R9         // <--                                  // tst	w9, w8
	CSETW EQ, R0         // <--                                  // cset	w0, eq
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB  R0, ret+16(FP) // <--
	RET                  // <--                                  // ret

LBB0_21:
	WORD  $0x79400009    // MOVHU (R0), R9                       // ldrh	w9, [x0]
	TSTW  R8, R9         // <--                                  // tst	w9, w8
	CSETW EQ, R0         // <--                                  // cset	w0, eq
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB  R0, ret+16(FP) // <--
	RET                  // <--                                  // ret

LBB0_22:
	TSTW  R8, ZR         // <--                                  // tst	wzr, w8
	CSETW EQ, R0         // <--                                  // cset	w0, eq
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB  R0, ret+16(FP) // <--
	RET                  // <--                                  // ret

LCPI1_0:
LCPI1_1:

DATA LCPI1_0<>+0x00(SB)/1, $0x01
DATA LCPI1_0<>+0x01(SB)/1, $0x02
DATA LCPI1_0<>+0x02(SB)/1, $0x03
DATA LCPI1_0<>+0x03(SB)/1, $0x04
DATA LCPI1_0<>+0x04(SB)/1, $0x05
DATA LCPI1_0<>+0x05(SB)/1, $0x06
DATA LCPI1_0<>+0x06(SB)/1, $0x07
DATA LCPI1_0<>+0x07(SB)/1, $0x08
DATA LCPI1_0<>+0x08(SB)/1, $0x09
DATA LCPI1_0<>+0x09(SB)/1, $0x0a
DATA LCPI1_0<>+0x0a(SB)/1, $0x0b
DATA LCPI1_0<>+0x0b(SB)/1, $0x0c
DATA LCPI1_0<>+0x0c(SB)/1, $0x0d
DATA LCPI1_0<>+0x0d(SB)/1, $0x0e
DATA LCPI1_0<>+0x0e(SB)/1, $0x0f
DATA LCPI1_0<>+0x0f(SB)/1, $0x10
GLOBL LCPI1_0<>(SB), (RODATA|NOPTR), $16

DATA LCPI1_1<>+0x00(SB)/1, $0x01
DATA LCPI1_1<>+0x01(SB)/1, $0x02
DATA LCPI1_1<>+0x02(SB)/1, $0x03
DATA LCPI1_1<>+0x03(SB)/1, $0x04
DATA LCPI1_1<>+0x04(SB)/1, $0x05
DATA LCPI1_1<>+0x05(SB)/1, $0x06
DATA LCPI1_1<>+0x06(SB)/1, $0x07
DATA LCPI1_1<>+0x07(SB)/1, $0x08
GLOBL LCPI1_1<>(SB), (RODATA|NOPTR), $8

TEXT ·IndexNonASCII(SB), NOSPLIT, $0-24
	MOVD data+0(FP), R0
	MOVD length+8(FP), R1
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	MOVD R0, R8           // <--                                  // mov	x8, x0
	CMP  $8, R1           // <--                                  // cmp	x1, #8
	NOP                   // (skipped)                            // mov	x29, sp
	BCC  LBB1_5           // <--                                  // b.lo	.LBB1_5
	WORD $0x4f04e400      // VMOVI $128, V0.B16                   // movi	v0.16b, #128
	MOVD ZR, R0           // <--                                  // mov	x0, xzr

LBB1_2:
	ADD   $16, R0, R9            // <--                                  // add	x9, x0, #16
	CMP   R1, R9                 // <--                                  // cmp	x9, x1
	BHI   LBB1_6                 // <--                                  // b.hi	.LBB1_6
	WORD  $0x3ce06901            // FMOVQ (R8)(R0), F1                   // ldr	q1, [x8, x0]
	MOVD  R9, R0                 // <--                                  // mov	x0, x9
	VAND  V0.B16, V1.B16, V2.B16 // <--                                  // and	v2.16b, v1.16b, v0.16b
	WORD  $0x6eb0a842            // VUMAXV V2.S4, V2                     // umaxv	s2, v2.4s
	FMOVS F2, R10                // <--                                  // fmov	w10, s2
	CBZW  R10, LBB1_2            // <--                                  // cbz	w10, .LBB1_2
	WORD  $0x6f07e7e0            // VMOVI $-1, V0.D2                     // movi	v0.2d, #0xffffffffffffffff
	MOVD  $LCPI1_0<>(SB), R8     // <--                                  // adrp	x8, .LCPI1_0
	SUB   $16, R9, R9            // <--                                  // sub	x9, x9, #16
	WORD  $0x3dc00102            // FMOVQ (R8), F2                       // ldr	q2, [x8, :lo12:.LCPI1_0]
	WORD  $0x4e203420            // VCMGT V0.B16, V1.B16, V0.B16         // cmgt	v0.16b, v1.16b, v0.16b
	VORR  V2.B16, V0.B16, V0.B16 // <--                                  // orr	v0.16b, v0.16b, v2.16b
	WORD  $0x6e31a800            // VUMINV V0.B16, V0                    // uminv	b0, v0.16b
	FMOVS F0, R8                 // <--                                  // fmov	w8, s0
	ADD   R8, R9, R8             // <--                                  // add	x8, x9, x8
	SUB   $1, R8, R0             // <--                                  // sub	x0, x8, #1
	NOP                          // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD  R0, ret+16(FP)         // <--
	RET                          // <--                                  // ret

LBB1_5:
	MOVD ZR, R0  // <--                                  // mov	x0, xzr
	JMP  LBB1_10 // <--                                  // b	.LBB1_10

LBB1_6:
	ORR   $8, R0, R9          // <--                                  // orr	x9, x0, #0x8
	CMP   R1, R9              // <--                                  // cmp	x9, x1
	BHI   LBB1_10             // <--                                  // b.hi	.LBB1_10
	WORD  $0xfc606900         // FMOVD (R8)(R0), F0                   // ldr	d0, [x8, x0]
	WORD  $0x0f04e401         // VMOVI $128, V1.B8                    // movi	v1.8b, #128
	VAND  V1.B8, V0.B8, V1.B8 // <--                                  // and	v1.8b, v0.8b, v1.8b
	WORD  $0x2e70a821         // VUMAXV V1.H4, V1                     // umaxv	h1, v1.4h
	FMOVS F1, R10             // <--                                  // fmov	w10, s1
	CBZW  R10, LBB1_9         // <--                                  // cbz	w10, .LBB1_9
	WORD  $0x6f07e7e1         // VMOVI $-1, V1.D2                     // movi	v1.2d, #0xffffffffffffffff
	MOVD  $LCPI1_1<>(SB), R8  // <--                                  // adrp	x8, .LCPI1_1
	WORD  $0xfd400102         // FMOVD (R8), F2                       // ldr	d2, [x8, :lo12:.LCPI1_1]
	WORD  $0x0e213400         // VCMGT V1.B8, V0.B8, V0.B8            // cmgt	v0.8b, v0.8b, v1.8b
	VORR  V2.B8, V0.B8, V0.B8 // <--                                  // orr	v0.8b, v0.8b, v2.8b
	WORD  $0x2e31a800         // VUMINV V0.B8, V0                     // uminv	b0, v0.8b
	FMOVS F0, R8              // <--                                  // fmov	w8, s0
	ADD   R8, R0, R8          // <--                                  // add	x8, x0, x8
	SUB   $1, R8, R0          // <--                                  // sub	x0, x8, #1
	NOP                       // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD  R0, ret+16(FP)      // <--
	RET                       // <--                                  // ret

LBB1_9:
	MOVD R9, R0 // <--                                  // mov	x0, x9

LBB1_10:
	ADD   $4, R0, R9            // <--                                  // add	x9, x0, #4
	CMP   R1, R9                // <--                                  // cmp	x9, x1
	BHI   LBB1_14               // <--                                  // b.hi	.LBB1_14
	WORD  $0xb860690a           // MOVWU (R8)(R0), R10                  // ldr	w10, [x8, x0]
	ANDSW $2155905152, R10, R10 // <--                                  // ands	w10, w10, #0x80808080
	BEQ   LBB1_13               // <--                                  // b.eq	.LBB1_13
	RBITW R10, R8               // <--                                  // rbit	w8, w10
	CLZW  R8, R8                // <--                                  // clz	w8, w8
	LSRW  $3, R8, R8            // <--                                  // lsr	w8, w8, #3
	ADD   R8, R0, R0            // <--                                  // add	x0, x0, x8
	NOP                         // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD  R0, ret+16(FP)        // <--
	RET                         // <--                                  // ret

LBB1_13:
	MOVD R9, R0 // <--                                  // mov	x0, x9

LBB1_14:
	CMP R1, R0  // <--                                  // cmp	x0, x1
	BCS LBB1_17 // <--                                  // b.hs	.LBB1_17

LBB1_15:
	WORD $0x38e06909      // MOVBW (R8)(R0), R9                   // ldrsb	w9, [x8, x0]
	TBNZ $31, R9, LBB1_18 // <--                                  // tbnz	w9, #31, .LBB1_18
	ADD  $1, R0, R0       // <--                                  // add	x0, x0, #1
	CMP  R0, R1           // <--                                  // cmp	x1, x0
	BNE  LBB1_15          // <--                                  // b.ne	.LBB1_15

LBB1_17:
	MOVD $-1, R0 // <--                                  // mov	x0, #-1

LBB1_18:
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+16(FP) // <--
	RET                 // <--                                  // ret

DATA uppercasingTable<>+0x00(SB)/8, $0x2020202020202000
DATA uppercasingTable<>+0x08(SB)/8, $0x2020202020202020
DATA uppercasingTable<>+0x10(SB)/8, $0x2020202020202020
DATA uppercasingTable<>+0x18(SB)/8, $0x0000000000202020
GLOBL uppercasingTable<>(SB), (RODATA|NOPTR), $32

TEXT ·EqualFold(SB), NOSPLIT, $0-33
	MOVD a+0(FP), R0
	MOVD a_len+8(FP), R1
	MOVD b+16(FP), R2
	MOVD b_len+24(FP), R3
	CMP  R3, R1                      // <--                                  // cmp	x1, x3
	BNE  LBB2_15                     // <--                                  // b.ne	.LBB2_15
	NOP                              // (skipped)                            // stp	x29, x30, [sp, #-16]!
	MOVD $uppercasingTable<>(SB), R8 // <--                                  // adrp	x8, uppercasingTable
	ADD  $0, R8, R8                  // <--                                  // add	x8, x8, :lo12:uppercasingTable
	CMP  $8, R1                      // <--                                  // cmp	x1, #8
	NOP                              // (skipped)                            // mov	x29, sp
	WORD $0x4c40a100                 // VLD1 (R8), [V0.B16, V1.B16]          // ld1	{ v0.16b, v1.16b }, [x8]
	BCC  LBB2_9                      // <--                                  // b.lo	.LBB2_9
	ADD  R1, R0, R8                  // <--                                  // add	x8, x0, x1
	AND  $15, R1, R1                 // <--                                  // and	x1, x1, #0xf
	SUB  R1, R8, R8                  // <--                                  // sub	x8, x8, x1
	CMP  R0, R8                      // <--                                  // cmp	x8, x0
	BLS  LBB2_6                      // <--                                  // b.ls	.LBB2_6
	WORD $0x4f05e402                 // VMOVI $160, V2.B16                   // movi	v2.16b, #160

LBB2_4:
	WORD  $0x3dc00003                      // FMOVQ (R0), F3                       // ldr	q3, [x0]
	WORD  $0x3dc00044                      // FMOVQ (R2), F4                       // ldr	q4, [x2]
	VADD  V2.B16, V3.B16, V3.B16           // <--                                  // add	v3.16b, v3.16b, v2.16b
	VADD  V2.B16, V4.B16, V4.B16           // <--                                  // add	v4.16b, v4.16b, v2.16b
	VTBL  V3.B16, [V0.B16, V1.B16], V5.B16 // <--                                  // tbl	v5.16b, { v0.16b, v1.16b }, v3.16b
	VTBL  V4.B16, [V0.B16, V1.B16], V6.B16 // <--                                  // tbl	v6.16b, { v0.16b, v1.16b }, v4.16b
	VSUB  V5.B16, V3.B16, V3.B16           // <--                                  // sub	v3.16b, v3.16b, v5.16b
	VSUB  V6.B16, V4.B16, V4.B16           // <--                                  // sub	v4.16b, v4.16b, v6.16b
	WORD  $0x6e248c63                      // VCMEQ V4.B16, V3.B16, V3.B16         // cmeq	v3.16b, v3.16b, v4.16b
	WORD  $0x6eb1a863                      // VUMINV V3.S4, V3                     // uminv	s3, v3.4s
	FMOVS F3, R9                           // <--                                  // fmov	w9, s3
	CMNW  $1, R9                           // <--                                  // cmn	w9, #1
	BNE   LBB2_19                          // <--                                  // b.ne	.LBB2_19
	ADD   $16, R0, R0                      // <--                                  // add	x0, x0, #16
	ADD   $16, R2, R2                      // <--                                  // add	x2, x2, #16
	CMP   R8, R0                           // <--                                  // cmp	x0, x8
	BCC   LBB2_4                           // <--                                  // b.lo	.LBB2_4

LBB2_6:
	SUBS  $8, R1, R8                     // <--                                  // subs	x8, x1, #8
	BCC   LBB2_9                         // <--                                  // b.lo	.LBB2_9
	WORD  $0x0f05e403                    // VMOVI $160, V3.B8                    // movi	v3.8b, #160
	MOVW  $65535, R10                    // <--                                  // mov	w10, #65535
	WORD  $0xfc408402                    // FMOVD.P 8(R0), F2                    // ldr	d2, [x0], #8
	WORD  $0xfc408444                    // FMOVD.P 8(R2), F4                    // ldr	d4, [x2], #8
	VADD  V3.B8, V2.B8, V2.B8            // <--                                  // add	v2.8b, v2.8b, v3.8b
	VADD  V3.B8, V4.B8, V3.B8            // <--                                  // add	v3.8b, v4.8b, v3.8b
	VTBL  V2.B8, [V0.B16, V1.B16], V4.B8 // <--                                  // tbl	v4.8b, { v0.16b, v1.16b }, v2.8b
	VTBL  V3.B8, [V0.B16, V1.B16], V5.B8 // <--                                  // tbl	v5.8b, { v0.16b, v1.16b }, v3.8b
	VSUB  V4.B8, V2.B8, V2.B8            // <--                                  // sub	v2.8b, v2.8b, v4.8b
	VSUB  V5.B8, V3.B8, V3.B8            // <--                                  // sub	v3.8b, v3.8b, v5.8b
	WORD  $0x2e238c42                    // VCMEQ V3.B8, V2.B8, V2.B8            // cmeq	v2.8b, v2.8b, v3.8b
	WORD  $0x2e71a842                    // VUMINV V2.H4, V2                     // uminv	h2, v2.4h
	FMOVS F2, R9                         // <--                                  // fmov	w9, s2
	CMPW  R10, R9                        // <--                                  // cmp	w9, w10
	BNE   LBB2_19                        // <--                                  // b.ne	.LBB2_19
	MOVD  R8, R1                         // <--                                  // mov	x1, x8

LBB2_9:
	CBZ  R1, LBB2_16 // <--                                  // cbz	x1, .LBB2_16
	SUBS $4, R1, R10 // <--                                  // subs	x10, x1, #4
	BCC  LBB2_17     // <--                                  // b.lo	.LBB2_17
	WORD $0xb8404408 // MOVWU.P 4(R0), R8                    // ldr	w8, [x0], #4
	WORD $0xb8404449 // MOVWU.P 4(R2), R9                    // ldr	w9, [x2], #4
	MOVD R10, R1     // <--                                  // mov	x1, x10
	CMP  $1, R10     // <--                                  // cmp	x10, #1
	BEQ  LBB2_18     // <--                                  // b.eq	.LBB2_18

LBB2_12:
	CMP  $2, R1         // <--                                  // cmp	x1, #2
	BEQ  LBB2_20        // <--                                  // b.eq	.LBB2_20
	CMP  $3, R1         // <--                                  // cmp	x1, #3
	BNE  LBB2_21        // <--                                  // b.ne	.LBB2_21
	WORD $0x7940000a    // MOVHU (R0), R10                      // ldrh	w10, [x0]
	LSL  $24, R8, R8    // <--                                  // lsl	x8, x8, #24
	WORD $0x7940004c    // MOVHU (R2), R12                      // ldrh	w12, [x2]
	LSL  $24, R9, R9    // <--                                  // lsl	x9, x9, #24
	WORD $0x3940080b    // MOVBU 2(R0), R11                     // ldrb	w11, [x0, #2]
	WORD $0x3940084d    // MOVBU 2(R2), R13                     // ldrb	w13, [x2, #2]
	ORR  R10<<8, R8, R8 // <--                                  // orr	x8, x8, x10, lsl #8
	ORR  R12<<8, R9, R9 // <--                                  // orr	x9, x9, x12, lsl #8
	ORR  R11, R8, R8    // <--                                  // orr	x8, x8, x11
	ORR  R13, R9, R9    // <--                                  // orr	x9, x9, x13
	JMP  LBB2_21        // <--                                  // b	.LBB2_21

LBB2_15:
	MOVW ZR, R0         // <--                                  // mov	w0, wzr
	MOVB R0, ret+32(FP) // <--
	RET                 // <--                                  // ret

LBB2_16:
	MOVW $1, R0         // <--                                  // mov	w0, #1
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB R0, ret+32(FP) // <--
	RET                 // <--                                  // ret

LBB2_17:
	MOVD ZR, R9  // <--                                  // mov	x9, xzr
	MOVD ZR, R8  // <--                                  // mov	x8, xzr
	CMP  $1, R1  // <--                                  // cmp	x1, #1
	BNE  LBB2_12 // <--                                  // b.ne	.LBB2_12

LBB2_18:
	WORD $0x3940000a    // MOVBU (R0), R10                      // ldrb	w10, [x0]
	WORD $0x3940004b    // MOVBU (R2), R11                      // ldrb	w11, [x2]
	ORR  R8<<8, R10, R8 // <--                                  // orr	x8, x10, x8, lsl #8
	ORR  R9<<8, R11, R9 // <--                                  // orr	x9, x11, x9, lsl #8
	JMP  LBB2_21        // <--                                  // b	.LBB2_21

LBB2_19:
	MOVW ZR, R0         // <--                                  // mov	w0, wzr
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB R0, ret+32(FP) // <--
	RET                 // <--                                  // ret

LBB2_20:
	WORD $0x7940000a     // MOVHU (R0), R10                      // ldrh	w10, [x0]
	WORD $0x7940004b     // MOVHU (R2), R11                      // ldrh	w11, [x2]
	ORR  R8<<16, R10, R8 // <--                                  // orr	x8, x10, x8, lsl #16
	ORR  R9<<16, R11, R9 // <--                                  // orr	x9, x11, x9, lsl #16

LBB2_21:
	WORD  $0x0f05e402                    // VMOVI $160, V2.B8                    // movi	v2.8b, #160
	FMOVD R8, F3                         // <--                                  // fmov	d3, x8
	FMOVD R9, F4                         // <--                                  // fmov	d4, x9
	MOVW  $65535, R9                     // <--                                  // mov	w9, #65535
	VADD  V2.B8, V3.B8, V3.B8            // <--                                  // add	v3.8b, v3.8b, v2.8b
	VADD  V2.B8, V4.B8, V2.B8            // <--                                  // add	v2.8b, v4.8b, v2.8b
	VTBL  V3.B8, [V0.B16, V1.B16], V4.B8 // <--                                  // tbl	v4.8b, { v0.16b, v1.16b }, v3.8b
	VTBL  V2.B8, [V0.B16, V1.B16], V0.B8 // <--                                  // tbl	v0.8b, { v0.16b, v1.16b }, v2.8b
	VSUB  V4.B8, V3.B8, V1.B8            // <--                                  // sub	v1.8b, v3.8b, v4.8b
	VSUB  V0.B8, V2.B8, V0.B8            // <--                                  // sub	v0.8b, v2.8b, v0.8b
	WORD  $0x2e208c20                    // VCMEQ V0.B8, V1.B8, V0.B8            // cmeq	v0.8b, v1.8b, v0.8b
	WORD  $0x2e71a800                    // VUMINV V0.H4, V0                     // uminv	h0, v0.4h
	FMOVS F0, R8                         // <--                                  // fmov	w8, s0
	CMPW  R9, R8                         // <--                                  // cmp	w8, w9
	CSETW EQ, R0                         // <--                                  // cset	w0, eq
	NOP                                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB  R0, ret+32(FP)                 // <--
	RET                                  // <--                                  // ret
