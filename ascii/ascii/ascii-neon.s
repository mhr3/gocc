//go:build !noasm && arm64
// Code generated by gocc -- DO NOT EDIT.
//
// Source file         : ascii-neon.c
// Clang version       : Apple clang version 15.0.0 (clang-1500.3.9.4)
// Target architecture : arm64
// Compiler options    : [none]

#include "textflag.h"

DATA LCPI0_0<>+0x00(SB)/1, $0x01
DATA LCPI0_0<>+0x01(SB)/1, $0x02
DATA LCPI0_0<>+0x02(SB)/1, $0x03
DATA LCPI0_0<>+0x03(SB)/1, $0x04
DATA LCPI0_0<>+0x04(SB)/1, $0x05
DATA LCPI0_0<>+0x05(SB)/1, $0x06
DATA LCPI0_0<>+0x06(SB)/1, $0x07
DATA LCPI0_0<>+0x07(SB)/1, $0x08
DATA LCPI0_0<>+0x08(SB)/1, $0x09
DATA LCPI0_0<>+0x09(SB)/1, $0x0a
DATA LCPI0_0<>+0x0a(SB)/1, $0x0b
DATA LCPI0_0<>+0x0b(SB)/1, $0x0c
DATA LCPI0_0<>+0x0c(SB)/1, $0x0d
DATA LCPI0_0<>+0x0d(SB)/1, $0x0e
DATA LCPI0_0<>+0x0e(SB)/1, $0x0f
DATA LCPI0_0<>+0x0f(SB)/1, $0x10
GLOBL LCPI0_0<>(SB), (RODATA|NOPTR), $16

DATA LCPI0_1<>+0x00(SB)/1, $0x01
DATA LCPI0_1<>+0x01(SB)/1, $0x02
DATA LCPI0_1<>+0x02(SB)/1, $0x03
DATA LCPI0_1<>+0x03(SB)/1, $0x04
DATA LCPI0_1<>+0x04(SB)/1, $0x05
DATA LCPI0_1<>+0x05(SB)/1, $0x06
DATA LCPI0_1<>+0x06(SB)/1, $0x07
DATA LCPI0_1<>+0x07(SB)/1, $0x08
GLOBL LCPI0_1<>(SB), (RODATA|NOPTR), $8

TEXT ·IndexNonASCII(SB), NOSPLIT, $0-24
	MOVD data+0(FP), R0
	MOVD length+8(FP), R1
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	MOVD R0, R8           // <--                                  // mov	x8, x0
	CMP  $8, R1           // <--                                  // cmp	x1, #8
	NOP                   // (skipped)                            // mov	x29, sp
	BCC  LBB0_5           // <--                                  // b.lo	.LBB0_5
	WORD $0x4f04e400      // VMOVI $128, V0.B16                   // movi	v0.16b, #128
	MOVD ZR, R0           // <--                                  // mov	x0, xzr

LBB0_2:
	ADD   $16, R0, R9            // <--                                  // add	x9, x0, #16
	CMP   R1, R9                 // <--                                  // cmp	x9, x1
	BHI   LBB0_6                 // <--                                  // b.hi	.LBB0_6
	WORD  $0x3ce06901            // FMOVQ (R8)(R0), F1                   // ldr	q1, [x8, x0]
	MOVD  R9, R0                 // <--                                  // mov	x0, x9
	VAND  V0.B16, V1.B16, V2.B16 // <--                                  // and	v2.16b, v1.16b, v0.16b
	WORD  $0x6eb0a842            // VUMAXV V2.S4, V2                     // umaxv	s2, v2.4s
	FMOVS F2, R10                // <--                                  // fmov	w10, s2
	CBZW  R10, LBB0_2            // <--                                  // cbz	w10, .LBB0_2
	WORD  $0x6f07e7e0            // VMOVI $-1, V0.D2                     // movi	v0.2d, #0xffffffffffffffff
	MOVD  $LCPI0_0<>(SB), R8     // <--                                  // adrp	x8, .LCPI0_0
	SUB   $16, R9, R9            // <--                                  // sub	x9, x9, #16
	WORD  $0x3dc00102            // FMOVQ (R8), F2                       // ldr	q2, [x8, :lo12:.LCPI0_0]
	WORD  $0x4e203420            // VCMGT V0.B16, V1.B16, V0.B16         // cmgt	v0.16b, v1.16b, v0.16b
	VORR  V2.B16, V0.B16, V0.B16 // <--                                  // orr	v0.16b, v0.16b, v2.16b
	WORD  $0x6e31a800            // VUMINV V0.B16, V0                    // uminv	b0, v0.16b
	FMOVS F0, R8                 // <--                                  // fmov	w8, s0
	ADD   R8, R9, R8             // <--                                  // add	x8, x9, x8
	SUB   $1, R8, R0             // <--                                  // sub	x0, x8, #1
	NOP                          // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD  R0, ret+16(FP)         // <--
	RET                          // <--                                  // ret

LBB0_5:
	MOVD ZR, R0  // <--                                  // mov	x0, xzr
	JMP  LBB0_10 // <--                                  // b	.LBB0_10

LBB0_6:
	ORR   $8, R0, R9          // <--                                  // orr	x9, x0, #0x8
	CMP   R1, R9              // <--                                  // cmp	x9, x1
	BHI   LBB0_10             // <--                                  // b.hi	.LBB0_10
	WORD  $0xfc606900         // FMOVD (R8)(R0), F0                   // ldr	d0, [x8, x0]
	WORD  $0x0f04e401         // VMOVI $128, V1.B8                    // movi	v1.8b, #128
	VAND  V1.B8, V0.B8, V1.B8 // <--                                  // and	v1.8b, v0.8b, v1.8b
	WORD  $0x2e70a821         // VUMAXV V1.H4, V1                     // umaxv	h1, v1.4h
	FMOVS F1, R10             // <--                                  // fmov	w10, s1
	CBZW  R10, LBB0_9         // <--                                  // cbz	w10, .LBB0_9
	WORD  $0x6f07e7e1         // VMOVI $-1, V1.D2                     // movi	v1.2d, #0xffffffffffffffff
	MOVD  $LCPI0_1<>(SB), R8  // <--                                  // adrp	x8, .LCPI0_1
	WORD  $0xfd400102         // FMOVD (R8), F2                       // ldr	d2, [x8, :lo12:.LCPI0_1]
	WORD  $0x0e213400         // VCMGT V1.B8, V0.B8, V0.B8            // cmgt	v0.8b, v0.8b, v1.8b
	VORR  V2.B8, V0.B8, V0.B8 // <--                                  // orr	v0.8b, v0.8b, v2.8b
	WORD  $0x2e31a800         // VUMINV V0.B8, V0                     // uminv	b0, v0.8b
	FMOVS F0, R8              // <--                                  // fmov	w8, s0
	ADD   R8, R0, R8          // <--                                  // add	x8, x0, x8
	SUB   $1, R8, R0          // <--                                  // sub	x0, x8, #1
	NOP                       // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD  R0, ret+16(FP)      // <--
	RET                       // <--                                  // ret

LBB0_9:
	MOVD R9, R0 // <--                                  // mov	x0, x9

LBB0_10:
	ADD   $4, R0, R9            // <--                                  // add	x9, x0, #4
	CMP   R1, R9                // <--                                  // cmp	x9, x1
	BHI   LBB0_14               // <--                                  // b.hi	.LBB0_14
	WORD  $0xb860690a           // MOVWU (R8)(R0), R10                  // ldr	w10, [x8, x0]
	ANDSW $2155905152, R10, R10 // <--                                  // ands	w10, w10, #0x80808080
	BEQ   LBB0_13               // <--                                  // b.eq	.LBB0_13
	RBITW R10, R8               // <--                                  // rbit	w8, w10
	CLZW  R8, R8                // <--                                  // clz	w8, w8
	LSRW  $3, R8, R8            // <--                                  // lsr	w8, w8, #3
	ADD   R8, R0, R0            // <--                                  // add	x0, x0, x8
	NOP                         // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD  R0, ret+16(FP)        // <--
	RET                         // <--                                  // ret

LBB0_13:
	MOVD R9, R0 // <--                                  // mov	x0, x9

LBB0_14:
	CMP R1, R0  // <--                                  // cmp	x0, x1
	BCS LBB0_17 // <--                                  // b.hs	.LBB0_17

LBB0_15:
	WORD $0x38e06909      // MOVBW (R8)(R0), R9                   // ldrsb	w9, [x8, x0]
	TBNZ $31, R9, LBB0_18 // <--                                  // tbnz	w9, #31, .LBB0_18
	ADD  $1, R0, R0       // <--                                  // add	x0, x0, #1
	CMP  R0, R1           // <--                                  // cmp	x1, x0
	BNE  LBB0_15          // <--                                  // b.ne	.LBB0_15

LBB0_17:
	MOVD $-1, R0 // <--                                  // mov	x0, #-1

LBB0_18:
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVD R0, ret+16(FP) // <--
	RET                 // <--                                  // ret

TEXT ·IsASCII(SB), NOSPLIT, $0-17
	MOVD data+0(FP), R0
	MOVD length+8(FP), R1
	NOP                   // (skipped)                            // stp	x29, x30, [sp, #-16]!
	CMP  $8, R1           // <--                                  // cmp	x1, #8
	NOP                   // (skipped)                            // mov	x29, sp
	BCC  LBB1_8           // <--                                  // b.lo	.LBB1_8
	ADD  R1, R0, R8       // <--                                  // add	x8, x0, x1
	AND  $15, R1, R1      // <--                                  // and	x1, x1, #0xf
	SUB  R1, R8, R8       // <--                                  // sub	x8, x8, x1
	CMP  R0, R8           // <--                                  // cmp	x8, x0
	BLS  LBB1_5           // <--                                  // b.ls	.LBB1_5
	WORD $0x4f04e400      // VMOVI $128, V0.B16                   // movi	v0.16b, #128

LBB1_3:
	WORD  $0x3dc00001            // FMOVQ (R0), F1                       // ldr	q1, [x0]
	VAND  V0.B16, V1.B16, V1.B16 // <--                                  // and	v1.16b, v1.16b, v0.16b
	WORD  $0x6eb0a821            // VUMAXV V1.S4, V1                     // umaxv	s1, v1.4s
	FMOVS F1, R9                 // <--                                  // fmov	w9, s1
	CBNZW R9, LBB1_10            // <--                                  // cbnz	w9, .LBB1_10
	ADD   $16, R0, R0            // <--                                  // add	x0, x0, #16
	CMP   R8, R0                 // <--                                  // cmp	x0, x8
	BCC   LBB1_3                 // <--                                  // b.lo	.LBB1_3

LBB1_5:
	SUBS $8, R1, R8                    // <--                                  // subs	x8, x1, #8
	BCC  LBB1_8                        // <--                                  // b.lo	.LBB1_8
	WORD $0xf8408409                   // MOVD.P 8(R0), R9                     // ldr	x9, [x0], #8
	AND  $-9187201950435737472, R9, R9 // <--                                  // and	x9, x9, #0x8080808080808080
	CBNZ R9, LBB1_10                   // <--                                  // cbnz	x9, .LBB1_10
	MOVD R8, R1                        // <--                                  // mov	x1, x8

LBB1_8:
	MOVW $2155905152, R8 // <--                                  // mov	w8, #-2139062144
	SUBS $4, R1, R9      // <--                                  // subs	x9, x1, #4
	BCC  LBB1_12         // <--                                  // b.lo	.LBB1_12
	WORD $0xb940000a     // MOVWU (R0), R10                      // ldr	w10, [x0]
	TSTW R8, R10         // <--                                  // tst	w10, w8
	BEQ  LBB1_11         // <--                                  // b.eq	.LBB1_11

LBB1_10:
	MOVW ZR, R0         // <--                                  // mov	w0, wzr
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB R0, ret+16(FP) // <--
	RET                 // <--                                  // ret

LBB1_11:
	ADD  $4, R0, R0 // <--                                  // add	x0, x0, #4
	MOVD R9, R1     // <--                                  // mov	x1, x9

LBB1_12:
	CMP   $1, R1           // <--                                  // cmp	x1, #1
	BEQ   LBB1_16          // <--                                  // b.eq	.LBB1_16
	CMP   $2, R1           // <--                                  // cmp	x1, #2
	BEQ   LBB1_17          // <--                                  // b.eq	.LBB1_17
	CMP   $3, R1           // <--                                  // cmp	x1, #3
	BNE   LBB1_18          // <--                                  // b.ne	.LBB1_18
	WORD  $0x79400009      // MOVHU (R0), R9                       // ldrh	w9, [x0]
	WORD  $0x3940080a      // MOVBU 2(R0), R10                     // ldrb	w10, [x0, #2]
	BFIW  $16, R10, $8, R9 // <--                                  // bfi	w9, w10, #16, #8
	TSTW  R8, R9           // <--                                  // tst	w9, w8
	CSETW EQ, R0           // <--                                  // cset	w0, eq
	NOP                    // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB  R0, ret+16(FP)   // <--
	RET                    // <--                                  // ret

LBB1_16:
	WORD  $0x39400009    // MOVBU (R0), R9                       // ldrb	w9, [x0]
	TSTW  R8, R9         // <--                                  // tst	w9, w8
	CSETW EQ, R0         // <--                                  // cset	w0, eq
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB  R0, ret+16(FP) // <--
	RET                  // <--                                  // ret

LBB1_17:
	WORD  $0x79400009    // MOVHU (R0), R9                       // ldrh	w9, [x0]
	TSTW  R8, R9         // <--                                  // tst	w9, w8
	CSETW EQ, R0         // <--                                  // cset	w0, eq
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB  R0, ret+16(FP) // <--
	RET                  // <--                                  // ret

LBB1_18:
	TSTW  R8, ZR         // <--                                  // tst	wzr, w8
	CSETW EQ, R0         // <--                                  // cset	w0, eq
	NOP                  // (skipped)                            // ldp	x29, x30, [sp], #16
	MOVB  R0, ret+16(FP) // <--
	RET                  // <--                                  // ret
